// Copyright 2020 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Automatically generated by parse-opcodes.

/// The different instruction formats.
#[derive(Debug, Copy, Clone)]
pub enum Format {
    Illegal(u32),
    Unit(FormatUnit),
    AqrlRdRs1(FormatAqrlRdRs1),
    AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2),
    Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2),
    FmPredRdRs1Succ(FormatFmPredRdRs1Succ),
    Imm12Rd(FormatImm12Rd),
    Imm12RdRmRs1(FormatImm12RdRmRs1),
    Imm12RdRs1(FormatImm12RdRs1),
    Imm12Rs1(FormatImm12Rs1),
    Imm12Rs1StaggerMaskStaggerMax(FormatImm12Rs1StaggerMaskStaggerMax),
    Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2),
    Imm20Rd(FormatImm20Rd),
    Imm5Rd(FormatImm5Rd),
    Imm5RdRs1(FormatImm5RdRs1),
    Jimm20Rd(FormatJimm20Rd),
    NfRs1Rs2VdVm(FormatNfRs1Rs2VdVm),
    NfRs1Rs2VmVs3(FormatNfRs1Rs2VmVs3),
    NfRs1VdVm(FormatNfRs1VdVm),
    NfRs1VdVmVs2(FormatNfRs1VdVmVs2),
    NfRs1VmVs2Vs3(FormatNfRs1VmVs2Vs3),
    NfRs1VmVs3(FormatNfRs1VmVs3),
    RdRmRs1(FormatRdRmRs1),
    RdRmRs1Rs2(FormatRdRmRs1Rs2),
    RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3),
    RdRs1(FormatRdRs1),
    RdRs1Rs2(FormatRdRs1Rs2),
    RdRs1Rs2Rs3(FormatRdRs1Rs2Rs3),
    RdRs1Rs3Shamt(FormatRdRs1Rs3Shamt),
    RdRs1Shamt(FormatRdRs1Shamt),
    RdRs1Shamtw(FormatRdRs1Shamtw),
    RdRs1Zimm11(FormatRdRs1Zimm11),
    RdRs2(FormatRdRs2),
    RdVmVs2(FormatRdVmVs2),
    RdVs2(FormatRdVs2),
    RdZimmZimm10(FormatRdZimmZimm10),
    Rs1(FormatRs1),
    Rs1Rs2(FormatRs1Rs2),
    Rs1Vd(FormatRs1Vd),
    Rs1VdVmVs2(FormatRs1VdVmVs2),
    Rs1VdVmVs2Wd(FormatRs1VdVmVs2Wd),
    Rs1VdVs2(FormatRs1VdVs2),
    Rs1Vs3(FormatRs1Vs3),
    Simm5Vd(FormatSimm5Vd),
    Simm5VdVmVs2(FormatSimm5VdVmVs2),
    Simm5VdVs2(FormatSimm5VdVs2),
    VdVm(FormatVdVm),
    VdVmVs1Vs2(FormatVdVmVs1Vs2),
    VdVmVs2(FormatVdVmVs2),
    VdVs1(FormatVdVs1),
    VdVs1Vs2(FormatVdVs1Vs2),
    VdVs2(FormatVdVs2),
}

impl Format {
    pub fn raw(&self) -> u32 {
        match self {
            Self::Illegal(x) => *x,
            Self::Unit(x) => x.raw,
            Self::AqrlRdRs1(x) => x.raw,
            Self::AqrlRdRs1Rs2(x) => x.raw,
            Self::Bimm12hiBimm12loRs1Rs2(x) => x.raw,
            Self::FmPredRdRs1Succ(x) => x.raw,
            Self::Imm12Rd(x) => x.raw,
            Self::Imm12RdRmRs1(x) => x.raw,
            Self::Imm12RdRs1(x) => x.raw,
            Self::Imm12Rs1(x) => x.raw,
            Self::Imm12Rs1StaggerMaskStaggerMax(x) => x.raw,
            Self::Imm12hiImm12loRs1Rs2(x) => x.raw,
            Self::Imm20Rd(x) => x.raw,
            Self::Imm5Rd(x) => x.raw,
            Self::Imm5RdRs1(x) => x.raw,
            Self::Jimm20Rd(x) => x.raw,
            Self::NfRs1Rs2VdVm(x) => x.raw,
            Self::NfRs1Rs2VmVs3(x) => x.raw,
            Self::NfRs1VdVm(x) => x.raw,
            Self::NfRs1VdVmVs2(x) => x.raw,
            Self::NfRs1VmVs2Vs3(x) => x.raw,
            Self::NfRs1VmVs3(x) => x.raw,
            Self::RdRmRs1(x) => x.raw,
            Self::RdRmRs1Rs2(x) => x.raw,
            Self::RdRmRs1Rs2Rs3(x) => x.raw,
            Self::RdRs1(x) => x.raw,
            Self::RdRs1Rs2(x) => x.raw,
            Self::RdRs1Rs2Rs3(x) => x.raw,
            Self::RdRs1Rs3Shamt(x) => x.raw,
            Self::RdRs1Shamt(x) => x.raw,
            Self::RdRs1Shamtw(x) => x.raw,
            Self::RdRs1Zimm11(x) => x.raw,
            Self::RdRs2(x) => x.raw,
            Self::RdVmVs2(x) => x.raw,
            Self::RdVs2(x) => x.raw,
            Self::RdZimmZimm10(x) => x.raw,
            Self::Rs1(x) => x.raw,
            Self::Rs1Rs2(x) => x.raw,
            Self::Rs1Vd(x) => x.raw,
            Self::Rs1VdVmVs2(x) => x.raw,
            Self::Rs1VdVmVs2Wd(x) => x.raw,
            Self::Rs1VdVs2(x) => x.raw,
            Self::Rs1Vs3(x) => x.raw,
            Self::Simm5Vd(x) => x.raw,
            Self::Simm5VdVmVs2(x) => x.raw,
            Self::Simm5VdVs2(x) => x.raw,
            Self::VdVm(x) => x.raw,
            Self::VdVmVs1Vs2(x) => x.raw,
            Self::VdVmVs2(x) => x.raw,
            Self::VdVs1(x) => x.raw,
            Self::VdVs1Vs2(x) => x.raw,
            Self::VdVs2(x) => x.raw,
        }
    }
}

impl std::fmt::Display for Format {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Illegal(x) => write!(f, "<illegal 0x{:x}>", x),
            Self::Unit(x) => write!(f, "{}", x),
            Self::AqrlRdRs1(x) => write!(f, "{}", x),
            Self::AqrlRdRs1Rs2(x) => write!(f, "{}", x),
            Self::Bimm12hiBimm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::FmPredRdRs1Succ(x) => write!(f, "{}", x),
            Self::Imm12Rd(x) => write!(f, "{}", x),
            Self::Imm12RdRmRs1(x) => write!(f, "{}", x),
            Self::Imm12RdRs1(x) => write!(f, "{}", x),
            Self::Imm12Rs1(x) => write!(f, "{}", x),
            Self::Imm12Rs1StaggerMaskStaggerMax(x) => write!(f, "{}", x),
            Self::Imm12hiImm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::Imm20Rd(x) => write!(f, "{}", x),
            Self::Imm5Rd(x) => write!(f, "{}", x),
            Self::Imm5RdRs1(x) => write!(f, "{}", x),
            Self::Jimm20Rd(x) => write!(f, "{}", x),
            Self::NfRs1Rs2VdVm(x) => write!(f, "{}", x),
            Self::NfRs1Rs2VmVs3(x) => write!(f, "{}", x),
            Self::NfRs1VdVm(x) => write!(f, "{}", x),
            Self::NfRs1VdVmVs2(x) => write!(f, "{}", x),
            Self::NfRs1VmVs2Vs3(x) => write!(f, "{}", x),
            Self::NfRs1VmVs3(x) => write!(f, "{}", x),
            Self::RdRmRs1(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2Rs3(x) => write!(f, "{}", x),
            Self::RdRs1(x) => write!(f, "{}", x),
            Self::RdRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRs1Rs2Rs3(x) => write!(f, "{}", x),
            Self::RdRs1Rs3Shamt(x) => write!(f, "{}", x),
            Self::RdRs1Shamt(x) => write!(f, "{}", x),
            Self::RdRs1Shamtw(x) => write!(f, "{}", x),
            Self::RdRs1Zimm11(x) => write!(f, "{}", x),
            Self::RdRs2(x) => write!(f, "{}", x),
            Self::RdVmVs2(x) => write!(f, "{}", x),
            Self::RdVs2(x) => write!(f, "{}", x),
            Self::RdZimmZimm10(x) => write!(f, "{}", x),
            Self::Rs1(x) => write!(f, "{}", x),
            Self::Rs1Rs2(x) => write!(f, "{}", x),
            Self::Rs1Vd(x) => write!(f, "{}", x),
            Self::Rs1VdVmVs2(x) => write!(f, "{}", x),
            Self::Rs1VdVmVs2Wd(x) => write!(f, "{}", x),
            Self::Rs1VdVs2(x) => write!(f, "{}", x),
            Self::Rs1Vs3(x) => write!(f, "{}", x),
            Self::Simm5Vd(x) => write!(f, "{}", x),
            Self::Simm5VdVmVs2(x) => write!(f, "{}", x),
            Self::Simm5VdVs2(x) => write!(f, "{}", x),
            Self::VdVm(x) => write!(f, "{}", x),
            Self::VdVmVs1Vs2(x) => write!(f, "{}", x),
            Self::VdVmVs2(x) => write!(f, "{}", x),
            Self::VdVs1(x) => write!(f, "{}", x),
            Self::VdVs1Vs2(x) => write!(f, "{}", x),
            Self::VdVs2(x) => write!(f, "{}", x),
        }
    }
}

/// The `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatUnit {
    pub op: OpcodeUnit,
    pub raw: u32,
}

impl FormatUnit {}

/// Opcodes with the `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeUnit {
    Ecall,
    Ebreak,
    Uret,
    Sret,
    Mret,
    Dret,
    Wfi,
}

impl std::fmt::Display for FormatUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ecall => write!(f, "ecall"),
            Self::Ebreak => write!(f, "ebreak"),
            Self::Uret => write!(f, "uret"),
            Self::Sret => write!(f, "sret"),
            Self::Mret => write!(f, "mret"),
            Self::Dret => write!(f, "dret"),
            Self::Wfi => write!(f, "wfi"),
        }
    }
}

/// The `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1 {
    pub op: OpcodeAqrlRdRs1,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatAqrlRdRs1 {}

/// Opcodes with the `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1 {
    LrW,
    LrD,
}

impl std::fmt::Display for FormatAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::LrW => write!(f, "lr.w"),
            Self::LrD => write!(f, "lr.d"),
        }
    }
}

/// The `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1Rs2 {
    pub op: OpcodeAqrlRdRs1Rs2,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatAqrlRdRs1Rs2 {}

/// Opcodes with the `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1Rs2 {
    AmoaddW,
    AmoxorW,
    AmoorW,
    AmoandW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    AmoswapW,
    ScW,
    AmoaddD,
    AmoxorD,
    AmoorD,
    AmoandD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
    AmoswapD,
    ScD,
}

impl std::fmt::Display for FormatAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AmoaddW => write!(f, "amoadd.w"),
            Self::AmoxorW => write!(f, "amoxor.w"),
            Self::AmoorW => write!(f, "amoor.w"),
            Self::AmoandW => write!(f, "amoand.w"),
            Self::AmominW => write!(f, "amomin.w"),
            Self::AmomaxW => write!(f, "amomax.w"),
            Self::AmominuW => write!(f, "amominu.w"),
            Self::AmomaxuW => write!(f, "amomaxu.w"),
            Self::AmoswapW => write!(f, "amoswap.w"),
            Self::ScW => write!(f, "sc.w"),
            Self::AmoaddD => write!(f, "amoadd.d"),
            Self::AmoxorD => write!(f, "amoxor.d"),
            Self::AmoorD => write!(f, "amoor.d"),
            Self::AmoandD => write!(f, "amoand.d"),
            Self::AmominD => write!(f, "amomin.d"),
            Self::AmomaxD => write!(f, "amomax.d"),
            Self::AmominuD => write!(f, "amominu.d"),
            Self::AmomaxuD => write!(f, "amomaxu.d"),
            Self::AmoswapD => write!(f, "amoswap.d"),
            Self::ScD => write!(f, "sc.d"),
        }
    }
}

/// The `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatBimm12hiBimm12loRs1Rs2 {
    pub op: OpcodeBimm12hiBimm12loRs1Rs2,
    pub raw: u32,
    pub bimm12hi: u32,
    pub bimm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatBimm12hiBimm12loRs1Rs2 {
    pub fn bimm(&self) -> i32 {
        (((((self.bimm12lo >> 0) & 0x1) << 11
            | ((self.bimm12lo >> 1) & 0xf) << 1
            | ((self.bimm12hi >> 0) & 0x3f) << 5
            | ((self.bimm12hi >> 6) & 0x1) << 12)
            << 19) as i32)
            >> 19
    }
}

/// Opcodes with the `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeBimm12hiBimm12loRs1Rs2 {
    Beq,
    Bne,
    Blt,
    Bge,
    Bltu,
    Bgeu,
}

impl std::fmt::Display for FormatBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " bimm12hi={:x}", self.bimm12hi)?;
        write!(f, " bimm12lo={:x}", self.bimm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Beq => write!(f, "beq"),
            Self::Bne => write!(f, "bne"),
            Self::Blt => write!(f, "blt"),
            Self::Bge => write!(f, "bge"),
            Self::Bltu => write!(f, "bltu"),
            Self::Bgeu => write!(f, "bgeu"),
        }
    }
}

/// The `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatFmPredRdRs1Succ {
    pub op: OpcodeFmPredRdRs1Succ,
    pub raw: u32,
    pub fm: u32,
    pub pred: u32,
    pub rd: u32,
    pub rs1: u32,
    pub succ: u32,
}

impl FormatFmPredRdRs1Succ {}

/// Opcodes with the `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeFmPredRdRs1Succ {
    Fence,
}

impl std::fmt::Display for FormatFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " fm={:x}", self.fm)?;
        write!(f, " pred={:x}", self.pred)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " succ={:x}", self.succ)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fence => write!(f, "fence"),
        }
    }
}

/// The `Imm12Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rd {
    pub op: OpcodeImm12Rd,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
}

impl FormatImm12Rd {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rd {
    Scfgri,
}

impl std::fmt::Display for FormatImm12Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Scfgri => write!(f, "scfgri"),
        }
    }
}

/// The `Imm12RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12RdRmRs1 {
    pub op: OpcodeImm12RdRmRs1,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
}

impl FormatImm12RdRmRs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12RdRmRs1 {
    Irep,
}

impl std::fmt::Display for FormatImm12RdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12RdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Irep => write!(f, "irep"),
        }
    }
}

/// The `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12RdRs1 {
    pub op: OpcodeImm12RdRs1,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm12RdRs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12RdRs1 {
    Jalr,
    Addi,
    Slti,
    Sltiu,
    Xori,
    Ori,
    Andi,
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    FenceI,
    Addiw,
    Ld,
    Lwu,
    Flw,
    Fld,
    Flq,
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
    Flh,
}

impl std::fmt::Display for FormatImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jalr => write!(f, "jalr"),
            Self::Addi => write!(f, "addi"),
            Self::Slti => write!(f, "slti"),
            Self::Sltiu => write!(f, "sltiu"),
            Self::Xori => write!(f, "xori"),
            Self::Ori => write!(f, "ori"),
            Self::Andi => write!(f, "andi"),
            Self::Lb => write!(f, "lb"),
            Self::Lh => write!(f, "lh"),
            Self::Lw => write!(f, "lw"),
            Self::Lbu => write!(f, "lbu"),
            Self::Lhu => write!(f, "lhu"),
            Self::FenceI => write!(f, "fence.i"),
            Self::Addiw => write!(f, "addiw"),
            Self::Ld => write!(f, "ld"),
            Self::Lwu => write!(f, "lwu"),
            Self::Flw => write!(f, "flw"),
            Self::Fld => write!(f, "fld"),
            Self::Flq => write!(f, "flq"),
            Self::Csrrw => write!(f, "csrrw"),
            Self::Csrrs => write!(f, "csrrs"),
            Self::Csrrc => write!(f, "csrrc"),
            Self::Csrrwi => write!(f, "csrrwi"),
            Self::Csrrsi => write!(f, "csrrsi"),
            Self::Csrrci => write!(f, "csrrci"),
            Self::Flh => write!(f, "flh"),
        }
    }
}

/// The `Imm12Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rs1 {
    pub op: OpcodeImm12Rs1,
    pub raw: u32,
    pub imm12: u32,
    pub rs1: u32,
}

impl FormatImm12Rs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rs1 {
    Scfgwi,
}

impl std::fmt::Display for FormatImm12Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Scfgwi => write!(f, "scfgwi"),
        }
    }
}

/// The `Imm12Rs1StaggerMaskStaggerMax` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rs1StaggerMaskStaggerMax {
    pub op: OpcodeImm12Rs1StaggerMaskStaggerMax,
    pub raw: u32,
    pub imm12: u32,
    pub rs1: u32,
    pub stagger_mask: u32,
    pub stagger_max: u32,
}

impl FormatImm12Rs1StaggerMaskStaggerMax {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rs1StaggerMaskStaggerMax` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rs1StaggerMaskStaggerMax {
    FrepO,
    FrepI,
}

impl std::fmt::Display for FormatImm12Rs1StaggerMaskStaggerMax {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " stagger_mask={:x}", self.stagger_mask)?;
        write!(f, " stagger_max={:x}", self.stagger_max)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rs1StaggerMaskStaggerMax {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FrepO => write!(f, "frep.o"),
            Self::FrepI => write!(f, "frep.i"),
        }
    }
}

/// The `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12hiImm12loRs1Rs2 {
    pub op: OpcodeImm12hiImm12loRs1Rs2,
    pub raw: u32,
    pub imm12hi: u32,
    pub imm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatImm12hiImm12loRs1Rs2 {
    pub fn imm(&self) -> i32 {
        (((((self.imm12lo >> 0) & 0x1f) << 0 | ((self.imm12hi >> 0) & 0x7f) << 5) << 20) as i32)
            >> 20
    }
}

/// Opcodes with the `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12hiImm12loRs1Rs2 {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
    Fsq,
    Fsh,
}

impl std::fmt::Display for FormatImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12hi={:x}", self.imm12hi)?;
        write!(f, " imm12lo={:x}", self.imm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Sb => write!(f, "sb"),
            Self::Sh => write!(f, "sh"),
            Self::Sw => write!(f, "sw"),
            Self::Sd => write!(f, "sd"),
            Self::Fsw => write!(f, "fsw"),
            Self::Fsd => write!(f, "fsd"),
            Self::Fsq => write!(f, "fsq"),
            Self::Fsh => write!(f, "fsh"),
        }
    }
}

/// The `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm20Rd {
    pub op: OpcodeImm20Rd,
    pub raw: u32,
    pub imm20: u32,
    pub rd: u32,
}

impl FormatImm20Rd {}

/// Opcodes with the `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm20Rd {
    Lui,
    Auipc,
}

impl std::fmt::Display for FormatImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm20={:x}", self.imm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Lui => write!(f, "lui"),
            Self::Auipc => write!(f, "auipc"),
        }
    }
}

/// The `Imm5Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm5Rd {
    pub op: OpcodeImm5Rd,
    pub raw: u32,
    pub imm5: u32,
    pub rd: u32,
}

impl FormatImm5Rd {}

/// Opcodes with the `Imm5Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm5Rd {
    Dmstati,
}

impl std::fmt::Display for FormatImm5Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm5Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmstati => write!(f, "dmstati"),
        }
    }
}

/// The `Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm5RdRs1 {
    pub op: OpcodeImm5RdRs1,
    pub raw: u32,
    pub imm5: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm5RdRs1 {}

/// Opcodes with the `Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm5RdRs1 {
    Dmcpyi,
}

impl std::fmt::Display for FormatImm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmcpyi => write!(f, "dmcpyi"),
        }
    }
}

/// The `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatJimm20Rd {
    pub op: OpcodeJimm20Rd,
    pub raw: u32,
    pub jimm20: u32,
    pub rd: u32,
}

impl FormatJimm20Rd {
    pub fn jimm(&self) -> i32 {
        (((((self.jimm20 >> 0) & 0xff) << 12
            | ((self.jimm20 >> 8) & 0x1) << 11
            | ((self.jimm20 >> 9) & 0x3ff) << 1
            | ((self.jimm20 >> 19) & 0x1) << 20)
            << 11) as i32)
            >> 11
    }
}

/// Opcodes with the `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeJimm20Rd {
    Jal,
}

impl std::fmt::Display for FormatJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " jimm20={:x}", self.jimm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jal => write!(f, "jal"),
        }
    }
}

/// The `NfRs1Rs2VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1Rs2VdVm {
    pub op: OpcodeNfRs1Rs2VdVm,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub vd: u32,
    pub vm: u32,
}

impl FormatNfRs1Rs2VdVm {}

/// Opcodes with the `NfRs1Rs2VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1Rs2VdVm {
    Vlse8V,
    Vlse16V,
    Vlse32V,
    Vlse64V,
    Vlse128V,
    Vlse256V,
    Vlse512V,
    Vlse1024V,
}

impl std::fmt::Display for FormatNfRs1Rs2VdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1Rs2VdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vlse8V => write!(f, "vlse8.v"),
            Self::Vlse16V => write!(f, "vlse16.v"),
            Self::Vlse32V => write!(f, "vlse32.v"),
            Self::Vlse64V => write!(f, "vlse64.v"),
            Self::Vlse128V => write!(f, "vlse128.v"),
            Self::Vlse256V => write!(f, "vlse256.v"),
            Self::Vlse512V => write!(f, "vlse512.v"),
            Self::Vlse1024V => write!(f, "vlse1024.v"),
        }
    }
}

/// The `NfRs1Rs2VmVs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1Rs2VmVs3 {
    pub op: OpcodeNfRs1Rs2VmVs3,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub vm: u32,
    pub vs3: u32,
}

impl FormatNfRs1Rs2VmVs3 {}

/// Opcodes with the `NfRs1Rs2VmVs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1Rs2VmVs3 {
    Vsse8V,
    Vsse16V,
    Vsse32V,
    Vsse64V,
    Vsse128V,
    Vsse256V,
    Vsse512V,
    Vsse1024V,
}

impl std::fmt::Display for FormatNfRs1Rs2VmVs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs3={:x}", self.vs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1Rs2VmVs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vsse8V => write!(f, "vsse8.v"),
            Self::Vsse16V => write!(f, "vsse16.v"),
            Self::Vsse32V => write!(f, "vsse32.v"),
            Self::Vsse64V => write!(f, "vsse64.v"),
            Self::Vsse128V => write!(f, "vsse128.v"),
            Self::Vsse256V => write!(f, "vsse256.v"),
            Self::Vsse512V => write!(f, "vsse512.v"),
            Self::Vsse1024V => write!(f, "vsse1024.v"),
        }
    }
}

/// The `NfRs1VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1VdVm {
    pub op: OpcodeNfRs1VdVm,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub vd: u32,
    pub vm: u32,
}

impl FormatNfRs1VdVm {}

/// Opcodes with the `NfRs1VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1VdVm {
    Vle8V,
    Vle16V,
    Vle32V,
    Vle64V,
    Vle128V,
    Vle256V,
    Vle512V,
    Vle1024V,
    Vle8ffV,
    Vle16ffV,
    Vle32ffV,
    Vle64ffV,
    Vle128ffV,
    Vle256ffV,
    Vle512ffV,
    Vle1024ffV,
}

impl std::fmt::Display for FormatNfRs1VdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1VdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vle8V => write!(f, "vle8.v"),
            Self::Vle16V => write!(f, "vle16.v"),
            Self::Vle32V => write!(f, "vle32.v"),
            Self::Vle64V => write!(f, "vle64.v"),
            Self::Vle128V => write!(f, "vle128.v"),
            Self::Vle256V => write!(f, "vle256.v"),
            Self::Vle512V => write!(f, "vle512.v"),
            Self::Vle1024V => write!(f, "vle1024.v"),
            Self::Vle8ffV => write!(f, "vle8ff.v"),
            Self::Vle16ffV => write!(f, "vle16ff.v"),
            Self::Vle32ffV => write!(f, "vle32ff.v"),
            Self::Vle64ffV => write!(f, "vle64ff.v"),
            Self::Vle128ffV => write!(f, "vle128ff.v"),
            Self::Vle256ffV => write!(f, "vle256ff.v"),
            Self::Vle512ffV => write!(f, "vle512ff.v"),
            Self::Vle1024ffV => write!(f, "vle1024ff.v"),
        }
    }
}

/// The `NfRs1VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1VdVmVs2 {
    pub op: OpcodeNfRs1VdVmVs2,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs2: u32,
}

impl FormatNfRs1VdVmVs2 {}

/// Opcodes with the `NfRs1VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1VdVmVs2 {
    Vluxei8V,
    Vluxei16V,
    Vluxei32V,
    Vluxei64V,
    Vluxei128V,
    Vluxei256V,
    Vluxei512V,
    Vluxei1024V,
    Vloxei8V,
    Vloxei16V,
    Vloxei32V,
    Vloxei64V,
    Vloxei128V,
    Vloxei256V,
    Vloxei512V,
    Vloxei1024V,
}

impl std::fmt::Display for FormatNfRs1VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vluxei8V => write!(f, "vluxei8.v"),
            Self::Vluxei16V => write!(f, "vluxei16.v"),
            Self::Vluxei32V => write!(f, "vluxei32.v"),
            Self::Vluxei64V => write!(f, "vluxei64.v"),
            Self::Vluxei128V => write!(f, "vluxei128.v"),
            Self::Vluxei256V => write!(f, "vluxei256.v"),
            Self::Vluxei512V => write!(f, "vluxei512.v"),
            Self::Vluxei1024V => write!(f, "vluxei1024.v"),
            Self::Vloxei8V => write!(f, "vloxei8.v"),
            Self::Vloxei16V => write!(f, "vloxei16.v"),
            Self::Vloxei32V => write!(f, "vloxei32.v"),
            Self::Vloxei64V => write!(f, "vloxei64.v"),
            Self::Vloxei128V => write!(f, "vloxei128.v"),
            Self::Vloxei256V => write!(f, "vloxei256.v"),
            Self::Vloxei512V => write!(f, "vloxei512.v"),
            Self::Vloxei1024V => write!(f, "vloxei1024.v"),
        }
    }
}

/// The `NfRs1VmVs2Vs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1VmVs2Vs3 {
    pub op: OpcodeNfRs1VmVs2Vs3,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub vm: u32,
    pub vs2: u32,
    pub vs3: u32,
}

impl FormatNfRs1VmVs2Vs3 {}

/// Opcodes with the `NfRs1VmVs2Vs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1VmVs2Vs3 {
    Vsuxei8V,
    Vsuxei16V,
    Vsuxei32V,
    Vsuxei64V,
    Vsuxei128V,
    Vsuxei256V,
    Vsuxei512V,
    Vsuxei1024V,
    Vsoxei8V,
    Vsoxei16V,
    Vsoxei32V,
    Vsoxei64V,
    Vsoxei128V,
    Vsoxei256V,
    Vsoxei512V,
    Vsoxei1024V,
}

impl std::fmt::Display for FormatNfRs1VmVs2Vs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        write!(f, " vs3={:x}", self.vs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1VmVs2Vs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vsuxei8V => write!(f, "vsuxei8.v"),
            Self::Vsuxei16V => write!(f, "vsuxei16.v"),
            Self::Vsuxei32V => write!(f, "vsuxei32.v"),
            Self::Vsuxei64V => write!(f, "vsuxei64.v"),
            Self::Vsuxei128V => write!(f, "vsuxei128.v"),
            Self::Vsuxei256V => write!(f, "vsuxei256.v"),
            Self::Vsuxei512V => write!(f, "vsuxei512.v"),
            Self::Vsuxei1024V => write!(f, "vsuxei1024.v"),
            Self::Vsoxei8V => write!(f, "vsoxei8.v"),
            Self::Vsoxei16V => write!(f, "vsoxei16.v"),
            Self::Vsoxei32V => write!(f, "vsoxei32.v"),
            Self::Vsoxei64V => write!(f, "vsoxei64.v"),
            Self::Vsoxei128V => write!(f, "vsoxei128.v"),
            Self::Vsoxei256V => write!(f, "vsoxei256.v"),
            Self::Vsoxei512V => write!(f, "vsoxei512.v"),
            Self::Vsoxei1024V => write!(f, "vsoxei1024.v"),
        }
    }
}

/// The `NfRs1VmVs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatNfRs1VmVs3 {
    pub op: OpcodeNfRs1VmVs3,
    pub raw: u32,
    pub nf: u32,
    pub rs1: u32,
    pub vm: u32,
    pub vs3: u32,
}

impl FormatNfRs1VmVs3 {}

/// Opcodes with the `NfRs1VmVs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeNfRs1VmVs3 {
    Vse8V,
    Vse16V,
    Vse32V,
    Vse64V,
    Vse128V,
    Vse256V,
    Vse512V,
    Vse1024V,
}

impl std::fmt::Display for FormatNfRs1VmVs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " nf={:x}", self.nf)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs3={:x}", self.vs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeNfRs1VmVs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vse8V => write!(f, "vse8.v"),
            Self::Vse16V => write!(f, "vse16.v"),
            Self::Vse32V => write!(f, "vse32.v"),
            Self::Vse64V => write!(f, "vse64.v"),
            Self::Vse128V => write!(f, "vse128.v"),
            Self::Vse256V => write!(f, "vse256.v"),
            Self::Vse512V => write!(f, "vse512.v"),
            Self::Vse1024V => write!(f, "vse1024.v"),
        }
    }
}

/// The `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1 {
    pub op: OpcodeRdRmRs1,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
}

impl FormatRdRmRs1 {}

/// Opcodes with the `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1 {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FcvtSW,
    FcvtSWu,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLu,
    FcvtSD,
    FcvtDS,
    FsqrtD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWu,
    FcvtLD,
    FcvtLuD,
    FcvtDL,
    FcvtDLu,
    FcvtSQ,
    FcvtQS,
    FcvtDQ,
    FcvtQD,
    FsqrtQ,
    FcvtWQ,
    FcvtWuQ,
    FcvtQW,
    FcvtQWu,
    FcvtLQ,
    FcvtLuQ,
    FcvtQL,
    FcvtQLu,
    FsqrtH,
    FcvtWH,
    FcvtWuH,
    FcvtHW,
    FcvtHWu,
    FcvtLH,
    FcvtLuH,
    FcvtHL,
    FcvtHLu,
    FcvtHS,
    FcvtHD,
    FcvtHH,
    FcvtBH,
}

impl std::fmt::Display for FormatRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FsqrtS => write!(f, "fsqrt.s"),
            Self::FcvtWS => write!(f, "fcvt.w.s"),
            Self::FcvtWuS => write!(f, "fcvt.wu.s"),
            Self::FcvtSW => write!(f, "fcvt.s.w"),
            Self::FcvtSWu => write!(f, "fcvt.s.wu"),
            Self::FcvtLS => write!(f, "fcvt.l.s"),
            Self::FcvtLuS => write!(f, "fcvt.lu.s"),
            Self::FcvtSL => write!(f, "fcvt.s.l"),
            Self::FcvtSLu => write!(f, "fcvt.s.lu"),
            Self::FcvtSD => write!(f, "fcvt.s.d"),
            Self::FcvtDS => write!(f, "fcvt.d.s"),
            Self::FsqrtD => write!(f, "fsqrt.d"),
            Self::FcvtWD => write!(f, "fcvt.w.d"),
            Self::FcvtWuD => write!(f, "fcvt.wu.d"),
            Self::FcvtDW => write!(f, "fcvt.d.w"),
            Self::FcvtDWu => write!(f, "fcvt.d.wu"),
            Self::FcvtLD => write!(f, "fcvt.l.d"),
            Self::FcvtLuD => write!(f, "fcvt.lu.d"),
            Self::FcvtDL => write!(f, "fcvt.d.l"),
            Self::FcvtDLu => write!(f, "fcvt.d.lu"),
            Self::FcvtSQ => write!(f, "fcvt.s.q"),
            Self::FcvtQS => write!(f, "fcvt.q.s"),
            Self::FcvtDQ => write!(f, "fcvt.d.q"),
            Self::FcvtQD => write!(f, "fcvt.q.d"),
            Self::FsqrtQ => write!(f, "fsqrt.q"),
            Self::FcvtWQ => write!(f, "fcvt.w.q"),
            Self::FcvtWuQ => write!(f, "fcvt.wu.q"),
            Self::FcvtQW => write!(f, "fcvt.q.w"),
            Self::FcvtQWu => write!(f, "fcvt.q.wu"),
            Self::FcvtLQ => write!(f, "fcvt.l.q"),
            Self::FcvtLuQ => write!(f, "fcvt.lu.q"),
            Self::FcvtQL => write!(f, "fcvt.q.l"),
            Self::FcvtQLu => write!(f, "fcvt.q.lu"),
            Self::FsqrtH => write!(f, "fsqrt.h"),
            Self::FcvtWH => write!(f, "fcvt.w.h"),
            Self::FcvtWuH => write!(f, "fcvt.wu.h"),
            Self::FcvtHW => write!(f, "fcvt.h.w"),
            Self::FcvtHWu => write!(f, "fcvt.h.wu"),
            Self::FcvtLH => write!(f, "fcvt.l.h"),
            Self::FcvtLuH => write!(f, "fcvt.lu.h"),
            Self::FcvtHL => write!(f, "fcvt.h.l"),
            Self::FcvtHLu => write!(f, "fcvt.h.lu"),
            Self::FcvtHS => write!(f, "fcvt.h.s"),
            Self::FcvtHD => write!(f, "fcvt.h.d"),
            Self::FcvtHH => write!(f, "fcvt.h.h"),
            Self::FcvtBH => write!(f, "fcvt.b.h"),
        }
    }
}

/// The `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2 {
    pub op: OpcodeRdRmRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRmRs1Rs2 {}

/// Opcodes with the `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2 {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FaddQ,
    FsubQ,
    FmulQ,
    FdivQ,
    FaddH,
    FsubH,
    FmulH,
    FdivH,
}

impl std::fmt::Display for FormatRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FaddS => write!(f, "fadd.s"),
            Self::FsubS => write!(f, "fsub.s"),
            Self::FmulS => write!(f, "fmul.s"),
            Self::FdivS => write!(f, "fdiv.s"),
            Self::FaddD => write!(f, "fadd.d"),
            Self::FsubD => write!(f, "fsub.d"),
            Self::FmulD => write!(f, "fmul.d"),
            Self::FdivD => write!(f, "fdiv.d"),
            Self::FaddQ => write!(f, "fadd.q"),
            Self::FsubQ => write!(f, "fsub.q"),
            Self::FmulQ => write!(f, "fmul.q"),
            Self::FdivQ => write!(f, "fdiv.q"),
            Self::FaddH => write!(f, "fadd.h"),
            Self::FsubH => write!(f, "fsub.h"),
            Self::FmulH => write!(f, "fmul.h"),
            Self::FdivH => write!(f, "fdiv.h"),
        }
    }
}

/// The `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2Rs3 {
    pub op: OpcodeRdRmRs1Rs2Rs3,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub rs3: u32,
}

impl FormatRdRmRs1Rs2Rs3 {}

/// Opcodes with the `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2Rs3 {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
    FmaddQ,
    FmsubQ,
    FnmsubQ,
    FnmaddQ,
    FmaddH,
    FmsubH,
    FnmsubH,
    FnmaddH,
}

impl std::fmt::Display for FormatRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " rs3={:x}", self.rs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FmaddS => write!(f, "fmadd.s"),
            Self::FmsubS => write!(f, "fmsub.s"),
            Self::FnmsubS => write!(f, "fnmsub.s"),
            Self::FnmaddS => write!(f, "fnmadd.s"),
            Self::FmaddD => write!(f, "fmadd.d"),
            Self::FmsubD => write!(f, "fmsub.d"),
            Self::FnmsubD => write!(f, "fnmsub.d"),
            Self::FnmaddD => write!(f, "fnmadd.d"),
            Self::FmaddQ => write!(f, "fmadd.q"),
            Self::FmsubQ => write!(f, "fmsub.q"),
            Self::FnmsubQ => write!(f, "fnmsub.q"),
            Self::FnmaddQ => write!(f, "fnmadd.q"),
            Self::FmaddH => write!(f, "fmadd.h"),
            Self::FmsubH => write!(f, "fmsub.h"),
            Self::FnmsubH => write!(f, "fnmsub.h"),
            Self::FnmaddH => write!(f, "fnmadd.h"),
        }
    }
}

/// The `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1 {
    pub op: OpcodeRdRs1,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatRdRs1 {}

/// Opcodes with the `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1 {
    HlvB,
    HlvBu,
    HlvH,
    HlvHu,
    HlvxHu,
    HlvW,
    HlvxWu,
    HlvWu,
    HlvD,
    FmvXW,
    FclassS,
    FmvWX,
    FclassD,
    FmvXD,
    FmvDX,
    FclassQ,
    Clz,
    Ctz,
    Pcnt,
    SextB,
    SextH,
    Crc32B,
    Crc32H,
    Crc32W,
    Crc32cB,
    Crc32cH,
    Crc32cW,
    FmvXH,
    FclassH,
    FmvHX,
    FcvtSH,
    FcvtDH,
    FcvtHB,
    FcvtBB,
}

impl std::fmt::Display for FormatRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::HlvB => write!(f, "hlv.b"),
            Self::HlvBu => write!(f, "hlv.bu"),
            Self::HlvH => write!(f, "hlv.h"),
            Self::HlvHu => write!(f, "hlv.hu"),
            Self::HlvxHu => write!(f, "hlvx.hu"),
            Self::HlvW => write!(f, "hlv.w"),
            Self::HlvxWu => write!(f, "hlvx.wu"),
            Self::HlvWu => write!(f, "hlv.wu"),
            Self::HlvD => write!(f, "hlv.d"),
            Self::FmvXW => write!(f, "fmv.x.w"),
            Self::FclassS => write!(f, "fclass.s"),
            Self::FmvWX => write!(f, "fmv.w.x"),
            Self::FclassD => write!(f, "fclass.d"),
            Self::FmvXD => write!(f, "fmv.x.d"),
            Self::FmvDX => write!(f, "fmv.d.x"),
            Self::FclassQ => write!(f, "fclass.q"),
            Self::Clz => write!(f, "clz"),
            Self::Ctz => write!(f, "ctz"),
            Self::Pcnt => write!(f, "pcnt"),
            Self::SextB => write!(f, "sext.b"),
            Self::SextH => write!(f, "sext.h"),
            Self::Crc32B => write!(f, "crc32.b"),
            Self::Crc32H => write!(f, "crc32.h"),
            Self::Crc32W => write!(f, "crc32.w"),
            Self::Crc32cB => write!(f, "crc32c.b"),
            Self::Crc32cH => write!(f, "crc32c.h"),
            Self::Crc32cW => write!(f, "crc32c.w"),
            Self::FmvXH => write!(f, "fmv.x.h"),
            Self::FclassH => write!(f, "fclass.h"),
            Self::FmvHX => write!(f, "fmv.h.x"),
            Self::FcvtSH => write!(f, "fcvt.s.h"),
            Self::FcvtDH => write!(f, "fcvt.d.h"),
            Self::FcvtHB => write!(f, "fcvt.h.b"),
            Self::FcvtBB => write!(f, "fcvt.b.b"),
        }
    }
}

/// The `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs2 {
    pub op: OpcodeRdRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRs1Rs2 {}

/// Opcodes with the `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs2 {
    Add,
    Sub,
    Sll,
    Slt,
    Sltu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    Divu,
    Rem,
    Remu,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FleS,
    FltS,
    FeqS,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FleD,
    FltD,
    FeqD,
    FsgnjQ,
    FsgnjnQ,
    FsgnjxQ,
    FminQ,
    FmaxQ,
    FleQ,
    FltQ,
    FeqQ,
    Andn,
    Orn,
    Xnor,
    Slo,
    Sro,
    Rol,
    Ror,
    Sbclr,
    Sbset,
    Sbinv,
    Sbext,
    Gorc,
    Grev,
    Sh1add,
    Sh2add,
    Sh3add,
    Clmul,
    Clmulr,
    Clmulh,
    Min,
    Max,
    Minu,
    Maxu,
    Shfl,
    Unshfl,
    Bext,
    Bdep,
    Pack,
    Packu,
    Packh,
    Bfp,
    Dmcpy,
    FsgnjH,
    FsgnjnH,
    FsgnjxH,
    FminH,
    FmaxH,
    FeqH,
    FltH,
    FleH,
    Vsetvl,
}

impl std::fmt::Display for FormatRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Add => write!(f, "add"),
            Self::Sub => write!(f, "sub"),
            Self::Sll => write!(f, "sll"),
            Self::Slt => write!(f, "slt"),
            Self::Sltu => write!(f, "sltu"),
            Self::Xor => write!(f, "xor"),
            Self::Srl => write!(f, "srl"),
            Self::Sra => write!(f, "sra"),
            Self::Or => write!(f, "or"),
            Self::And => write!(f, "and"),
            Self::Addw => write!(f, "addw"),
            Self::Subw => write!(f, "subw"),
            Self::Sllw => write!(f, "sllw"),
            Self::Srlw => write!(f, "srlw"),
            Self::Sraw => write!(f, "sraw"),
            Self::Mul => write!(f, "mul"),
            Self::Mulh => write!(f, "mulh"),
            Self::Mulhsu => write!(f, "mulhsu"),
            Self::Mulhu => write!(f, "mulhu"),
            Self::Div => write!(f, "div"),
            Self::Divu => write!(f, "divu"),
            Self::Rem => write!(f, "rem"),
            Self::Remu => write!(f, "remu"),
            Self::Mulw => write!(f, "mulw"),
            Self::Divw => write!(f, "divw"),
            Self::Divuw => write!(f, "divuw"),
            Self::Remw => write!(f, "remw"),
            Self::Remuw => write!(f, "remuw"),
            Self::FsgnjS => write!(f, "fsgnj.s"),
            Self::FsgnjnS => write!(f, "fsgnjn.s"),
            Self::FsgnjxS => write!(f, "fsgnjx.s"),
            Self::FminS => write!(f, "fmin.s"),
            Self::FmaxS => write!(f, "fmax.s"),
            Self::FleS => write!(f, "fle.s"),
            Self::FltS => write!(f, "flt.s"),
            Self::FeqS => write!(f, "feq.s"),
            Self::FsgnjD => write!(f, "fsgnj.d"),
            Self::FsgnjnD => write!(f, "fsgnjn.d"),
            Self::FsgnjxD => write!(f, "fsgnjx.d"),
            Self::FminD => write!(f, "fmin.d"),
            Self::FmaxD => write!(f, "fmax.d"),
            Self::FleD => write!(f, "fle.d"),
            Self::FltD => write!(f, "flt.d"),
            Self::FeqD => write!(f, "feq.d"),
            Self::FsgnjQ => write!(f, "fsgnj.q"),
            Self::FsgnjnQ => write!(f, "fsgnjn.q"),
            Self::FsgnjxQ => write!(f, "fsgnjx.q"),
            Self::FminQ => write!(f, "fmin.q"),
            Self::FmaxQ => write!(f, "fmax.q"),
            Self::FleQ => write!(f, "fle.q"),
            Self::FltQ => write!(f, "flt.q"),
            Self::FeqQ => write!(f, "feq.q"),
            Self::Andn => write!(f, "andn"),
            Self::Orn => write!(f, "orn"),
            Self::Xnor => write!(f, "xnor"),
            Self::Slo => write!(f, "slo"),
            Self::Sro => write!(f, "sro"),
            Self::Rol => write!(f, "rol"),
            Self::Ror => write!(f, "ror"),
            Self::Sbclr => write!(f, "sbclr"),
            Self::Sbset => write!(f, "sbset"),
            Self::Sbinv => write!(f, "sbinv"),
            Self::Sbext => write!(f, "sbext"),
            Self::Gorc => write!(f, "gorc"),
            Self::Grev => write!(f, "grev"),
            Self::Sh1add => write!(f, "sh1add"),
            Self::Sh2add => write!(f, "sh2add"),
            Self::Sh3add => write!(f, "sh3add"),
            Self::Clmul => write!(f, "clmul"),
            Self::Clmulr => write!(f, "clmulr"),
            Self::Clmulh => write!(f, "clmulh"),
            Self::Min => write!(f, "min"),
            Self::Max => write!(f, "max"),
            Self::Minu => write!(f, "minu"),
            Self::Maxu => write!(f, "maxu"),
            Self::Shfl => write!(f, "shfl"),
            Self::Unshfl => write!(f, "unshfl"),
            Self::Bext => write!(f, "bext"),
            Self::Bdep => write!(f, "bdep"),
            Self::Pack => write!(f, "pack"),
            Self::Packu => write!(f, "packu"),
            Self::Packh => write!(f, "packh"),
            Self::Bfp => write!(f, "bfp"),
            Self::Dmcpy => write!(f, "dmcpy"),
            Self::FsgnjH => write!(f, "fsgnj.h"),
            Self::FsgnjnH => write!(f, "fsgnjn.h"),
            Self::FsgnjxH => write!(f, "fsgnjx.h"),
            Self::FminH => write!(f, "fmin.h"),
            Self::FmaxH => write!(f, "fmax.h"),
            Self::FeqH => write!(f, "feq.h"),
            Self::FltH => write!(f, "flt.h"),
            Self::FleH => write!(f, "fle.h"),
            Self::Vsetvl => write!(f, "vsetvl"),
        }
    }
}

/// The `RdRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs2Rs3 {
    pub op: OpcodeRdRs1Rs2Rs3,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub rs3: u32,
}

impl FormatRdRs1Rs2Rs3 {}

/// Opcodes with the `RdRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs2Rs3 {
    Cmix,
    Cmov,
    Fsl,
    Fsr,
}

impl std::fmt::Display for FormatRdRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " rs3={:x}", self.rs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Cmix => write!(f, "cmix"),
            Self::Cmov => write!(f, "cmov"),
            Self::Fsl => write!(f, "fsl"),
            Self::Fsr => write!(f, "fsr"),
        }
    }
}

/// The `RdRs1Rs3Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs3Shamt {
    pub op: OpcodeRdRs1Rs3Shamt,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs3: u32,
    pub shamt: u32,
}

impl FormatRdRs1Rs3Shamt {}

/// Opcodes with the `RdRs1Rs3Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs3Shamt {
    Fsri,
}

impl std::fmt::Display for FormatRdRs1Rs3Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs3={:x}", self.rs3)?;
        write!(f, " shamt={:x}", self.shamt)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs3Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fsri => write!(f, "fsri"),
        }
    }
}

/// The `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamt {
    pub op: OpcodeRdRs1Shamt,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamt: u32,
}

impl FormatRdRs1Shamt {}

/// Opcodes with the `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamt {
    Slli,
    Srli,
    Srai,
    Sloi,
    Sroi,
    Rori,
    Sbclri,
    Sbseti,
    Sbinvi,
    Sbexti,
    Gorci,
    Grevi,
}

impl std::fmt::Display for FormatRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamt={:x}", self.shamt)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slli => write!(f, "slli"),
            Self::Srli => write!(f, "srli"),
            Self::Srai => write!(f, "srai"),
            Self::Sloi => write!(f, "sloi"),
            Self::Sroi => write!(f, "sroi"),
            Self::Rori => write!(f, "rori"),
            Self::Sbclri => write!(f, "sbclri"),
            Self::Sbseti => write!(f, "sbseti"),
            Self::Sbinvi => write!(f, "sbinvi"),
            Self::Sbexti => write!(f, "sbexti"),
            Self::Gorci => write!(f, "gorci"),
            Self::Grevi => write!(f, "grevi"),
        }
    }
}

/// The `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamtw {
    pub op: OpcodeRdRs1Shamtw,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamtw: u32,
}

impl FormatRdRs1Shamtw {}

/// Opcodes with the `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamtw {
    Slliw,
    Srliw,
    Sraiw,
    Shfli,
    Unshfli,
}

impl std::fmt::Display for FormatRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamtw={:x}", self.shamtw)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slliw => write!(f, "slliw"),
            Self::Srliw => write!(f, "srliw"),
            Self::Sraiw => write!(f, "sraiw"),
            Self::Shfli => write!(f, "shfli"),
            Self::Unshfli => write!(f, "unshfli"),
        }
    }
}

/// The `RdRs1Zimm11` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Zimm11 {
    pub op: OpcodeRdRs1Zimm11,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub zimm11: u32,
}

impl FormatRdRs1Zimm11 {}

/// Opcodes with the `RdRs1Zimm11` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Zimm11 {
    Vsetvli,
}

impl std::fmt::Display for FormatRdRs1Zimm11 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " zimm11={:x}", self.zimm11)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Zimm11 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vsetvli => write!(f, "vsetvli"),
        }
    }
}

/// The `RdRs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs2 {
    pub op: OpcodeRdRs2,
    pub raw: u32,
    pub rd: u32,
    pub rs2: u32,
}

impl FormatRdRs2 {}

/// Opcodes with the `RdRs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs2 {
    Dmstat,
    Scfgr,
}

impl std::fmt::Display for FormatRdRs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmstat => write!(f, "dmstat"),
            Self::Scfgr => write!(f, "scfgr"),
        }
    }
}

/// The `RdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdVmVs2 {
    pub op: OpcodeRdVmVs2,
    pub raw: u32,
    pub rd: u32,
    pub vm: u32,
    pub vs2: u32,
}

impl FormatRdVmVs2 {}

/// Opcodes with the `RdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdVmVs2 {
    VcpopM,
    VfirstM,
}

impl std::fmt::Display for FormatRdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VcpopM => write!(f, "vcpop.m"),
            Self::VfirstM => write!(f, "vfirst.m"),
        }
    }
}

/// The `RdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdVs2 {
    pub op: OpcodeRdVs2,
    pub raw: u32,
    pub rd: u32,
    pub vs2: u32,
}

impl FormatRdVs2 {}

/// Opcodes with the `RdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdVs2 {
    VfmvFS,
    VmvXS,
}

impl std::fmt::Display for FormatRdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VfmvFS => write!(f, "vfmv.f.s"),
            Self::VmvXS => write!(f, "vmv.x.s"),
        }
    }
}

/// The `RdZimmZimm10` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdZimmZimm10 {
    pub op: OpcodeRdZimmZimm10,
    pub raw: u32,
    pub rd: u32,
    pub zimm: u32,
    pub zimm10: u32,
}

impl FormatRdZimmZimm10 {}

/// Opcodes with the `RdZimmZimm10` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdZimmZimm10 {
    Vsetivli,
}

impl std::fmt::Display for FormatRdZimmZimm10 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " zimm={:x}", self.zimm)?;
        write!(f, " zimm10={:x}", self.zimm10)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdZimmZimm10 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vsetivli => write!(f, "vsetivli"),
        }
    }
}

/// The `Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1 {
    pub op: OpcodeRs1,
    pub raw: u32,
    pub rs1: u32,
}

impl FormatRs1 {}

/// Opcodes with the `Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1 {
    Dmrep,
}

impl std::fmt::Display for FormatRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmrep => write!(f, "dmrep"),
        }
    }
}

/// The `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1Rs2 {
    pub op: OpcodeRs1Rs2,
    pub raw: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRs1Rs2 {}

/// Opcodes with the `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1Rs2 {
    HfenceVvma,
    HfenceGvma,
    HsvB,
    HsvH,
    HsvW,
    HsvD,
    SfenceVma,
    Dmsrc,
    Dmdst,
    Dmstr,
    Scfgw,
}

impl std::fmt::Display for FormatRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::HfenceVvma => write!(f, "hfence.vvma"),
            Self::HfenceGvma => write!(f, "hfence.gvma"),
            Self::HsvB => write!(f, "hsv.b"),
            Self::HsvH => write!(f, "hsv.h"),
            Self::HsvW => write!(f, "hsv.w"),
            Self::HsvD => write!(f, "hsv.d"),
            Self::SfenceVma => write!(f, "sfence.vma"),
            Self::Dmsrc => write!(f, "dmsrc"),
            Self::Dmdst => write!(f, "dmdst"),
            Self::Dmstr => write!(f, "dmstr"),
            Self::Scfgw => write!(f, "scfgw"),
        }
    }
}

/// The `Rs1Vd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1Vd {
    pub op: OpcodeRs1Vd,
    pub raw: u32,
    pub rs1: u32,
    pub vd: u32,
}

impl FormatRs1Vd {}

/// Opcodes with the `Rs1Vd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1Vd {
    VlmV,
    Vl1re8V,
    Vl1re16V,
    Vl1re32V,
    Vl1re64V,
    Vl2re8V,
    Vl2re16V,
    Vl2re32V,
    Vl2re64V,
    Vl4re8V,
    Vl4re16V,
    Vl4re32V,
    Vl4re64V,
    Vl8re8V,
    Vl8re16V,
    Vl8re32V,
    Vl8re64V,
    VfmvSF,
    VfmvVF,
    VmvVX,
    VmvSX,
}

impl std::fmt::Display for FormatRs1Vd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1Vd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VlmV => write!(f, "vlm.v"),
            Self::Vl1re8V => write!(f, "vl1re8.v"),
            Self::Vl1re16V => write!(f, "vl1re16.v"),
            Self::Vl1re32V => write!(f, "vl1re32.v"),
            Self::Vl1re64V => write!(f, "vl1re64.v"),
            Self::Vl2re8V => write!(f, "vl2re8.v"),
            Self::Vl2re16V => write!(f, "vl2re16.v"),
            Self::Vl2re32V => write!(f, "vl2re32.v"),
            Self::Vl2re64V => write!(f, "vl2re64.v"),
            Self::Vl4re8V => write!(f, "vl4re8.v"),
            Self::Vl4re16V => write!(f, "vl4re16.v"),
            Self::Vl4re32V => write!(f, "vl4re32.v"),
            Self::Vl4re64V => write!(f, "vl4re64.v"),
            Self::Vl8re8V => write!(f, "vl8re8.v"),
            Self::Vl8re16V => write!(f, "vl8re16.v"),
            Self::Vl8re32V => write!(f, "vl8re32.v"),
            Self::Vl8re64V => write!(f, "vl8re64.v"),
            Self::VfmvSF => write!(f, "vfmv.s.f"),
            Self::VfmvVF => write!(f, "vfmv.v.f"),
            Self::VmvVX => write!(f, "vmv.v.x"),
            Self::VmvSX => write!(f, "vmv.s.x"),
        }
    }
}

/// The `Rs1VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1VdVmVs2 {
    pub op: OpcodeRs1VdVmVs2,
    pub raw: u32,
    pub rs1: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs2: u32,
}

impl FormatRs1VdVmVs2 {}

/// Opcodes with the `Rs1VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1VdVmVs2 {
    VfaddVf,
    VfsubVf,
    VfminVf,
    VfmaxVf,
    VfsgnjVf,
    VfsgnjnVf,
    VfsgnjxVf,
    Vfslide1upVf,
    Vfslide1downVf,
    VmfeqVf,
    VmfleVf,
    VmfltVf,
    VmfneVf,
    VmfgtVf,
    VmfgeVf,
    VfdivVf,
    VfrdivVf,
    VfmulVf,
    VfrsubVf,
    VfmaddVf,
    VfnmaddVf,
    VfmsubVf,
    VfnmsubVf,
    VfmaccVf,
    VfnmaccVf,
    VfmsacVf,
    VfnmsacVf,
    VfwaddVf,
    VfwsubVf,
    VfwaddWf,
    VfwsubWf,
    VfwmulVf,
    VfwdotpVf,
    VfwmaccVf,
    VfwnmaccVf,
    VfwmsacVf,
    VfwnmsacVf,
    VaddVx,
    VsubVx,
    VrsubVx,
    VminuVx,
    VminVx,
    VmaxuVx,
    VmaxVx,
    VandVx,
    VorVx,
    VxorVx,
    VrgatherVx,
    VslideupVx,
    VslidedownVx,
    VmseqVx,
    VmsneVx,
    VmsltuVx,
    VmsltVx,
    VmsleuVx,
    VmsleVx,
    VmsgtuVx,
    VmsgtVx,
    VsadduVx,
    VsaddVx,
    VssubuVx,
    VssubVx,
    VsllVx,
    VsmulVx,
    VsrlVx,
    VsraVx,
    VssrlVx,
    VssraVx,
    VnsrlWx,
    VnsraWx,
    VnclipuWx,
    VnclipWx,
    VaadduVx,
    VaaddVx,
    VasubuVx,
    VasubVx,
    Vslide1upVx,
    Vslide1downVx,
    VdivuVx,
    VdivVx,
    VremuVx,
    VremVx,
    VmulhuVx,
    VmulVx,
    VmulhsuVx,
    VmulhVx,
    VmaddVx,
    VnmsubVx,
    VmaccVx,
    VnmsacVx,
    VwadduVx,
    VwaddVx,
    VwsubuVx,
    VwsubVx,
    VwadduWx,
    VwaddWx,
    VwsubuWx,
    VwsubWx,
    VwmuluVx,
    VwmulsuVx,
    VwmulVx,
    VwmaccuVx,
    VwmaccVx,
    VwmaccusVx,
    VwmaccsuVx,
}

impl std::fmt::Display for FormatRs1VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VfaddVf => write!(f, "vfadd.vf"),
            Self::VfsubVf => write!(f, "vfsub.vf"),
            Self::VfminVf => write!(f, "vfmin.vf"),
            Self::VfmaxVf => write!(f, "vfmax.vf"),
            Self::VfsgnjVf => write!(f, "vfsgnj.vf"),
            Self::VfsgnjnVf => write!(f, "vfsgnjn.vf"),
            Self::VfsgnjxVf => write!(f, "vfsgnjx.vf"),
            Self::Vfslide1upVf => write!(f, "vfslide1up.vf"),
            Self::Vfslide1downVf => write!(f, "vfslide1down.vf"),
            Self::VmfeqVf => write!(f, "vmfeq.vf"),
            Self::VmfleVf => write!(f, "vmfle.vf"),
            Self::VmfltVf => write!(f, "vmflt.vf"),
            Self::VmfneVf => write!(f, "vmfne.vf"),
            Self::VmfgtVf => write!(f, "vmfgt.vf"),
            Self::VmfgeVf => write!(f, "vmfge.vf"),
            Self::VfdivVf => write!(f, "vfdiv.vf"),
            Self::VfrdivVf => write!(f, "vfrdiv.vf"),
            Self::VfmulVf => write!(f, "vfmul.vf"),
            Self::VfrsubVf => write!(f, "vfrsub.vf"),
            Self::VfmaddVf => write!(f, "vfmadd.vf"),
            Self::VfnmaddVf => write!(f, "vfnmadd.vf"),
            Self::VfmsubVf => write!(f, "vfmsub.vf"),
            Self::VfnmsubVf => write!(f, "vfnmsub.vf"),
            Self::VfmaccVf => write!(f, "vfmacc.vf"),
            Self::VfnmaccVf => write!(f, "vfnmacc.vf"),
            Self::VfmsacVf => write!(f, "vfmsac.vf"),
            Self::VfnmsacVf => write!(f, "vfnmsac.vf"),
            Self::VfwaddVf => write!(f, "vfwadd.vf"),
            Self::VfwsubVf => write!(f, "vfwsub.vf"),
            Self::VfwaddWf => write!(f, "vfwadd.wf"),
            Self::VfwsubWf => write!(f, "vfwsub.wf"),
            Self::VfwmulVf => write!(f, "vfwmul.vf"),
            Self::VfwdotpVf => write!(f, "vfwdotp.vf"),
            Self::VfwmaccVf => write!(f, "vfwmacc.vf"),
            Self::VfwnmaccVf => write!(f, "vfwnmacc.vf"),
            Self::VfwmsacVf => write!(f, "vfwmsac.vf"),
            Self::VfwnmsacVf => write!(f, "vfwnmsac.vf"),
            Self::VaddVx => write!(f, "vadd.vx"),
            Self::VsubVx => write!(f, "vsub.vx"),
            Self::VrsubVx => write!(f, "vrsub.vx"),
            Self::VminuVx => write!(f, "vminu.vx"),
            Self::VminVx => write!(f, "vmin.vx"),
            Self::VmaxuVx => write!(f, "vmaxu.vx"),
            Self::VmaxVx => write!(f, "vmax.vx"),
            Self::VandVx => write!(f, "vand.vx"),
            Self::VorVx => write!(f, "vor.vx"),
            Self::VxorVx => write!(f, "vxor.vx"),
            Self::VrgatherVx => write!(f, "vrgather.vx"),
            Self::VslideupVx => write!(f, "vslideup.vx"),
            Self::VslidedownVx => write!(f, "vslidedown.vx"),
            Self::VmseqVx => write!(f, "vmseq.vx"),
            Self::VmsneVx => write!(f, "vmsne.vx"),
            Self::VmsltuVx => write!(f, "vmsltu.vx"),
            Self::VmsltVx => write!(f, "vmslt.vx"),
            Self::VmsleuVx => write!(f, "vmsleu.vx"),
            Self::VmsleVx => write!(f, "vmsle.vx"),
            Self::VmsgtuVx => write!(f, "vmsgtu.vx"),
            Self::VmsgtVx => write!(f, "vmsgt.vx"),
            Self::VsadduVx => write!(f, "vsaddu.vx"),
            Self::VsaddVx => write!(f, "vsadd.vx"),
            Self::VssubuVx => write!(f, "vssubu.vx"),
            Self::VssubVx => write!(f, "vssub.vx"),
            Self::VsllVx => write!(f, "vsll.vx"),
            Self::VsmulVx => write!(f, "vsmul.vx"),
            Self::VsrlVx => write!(f, "vsrl.vx"),
            Self::VsraVx => write!(f, "vsra.vx"),
            Self::VssrlVx => write!(f, "vssrl.vx"),
            Self::VssraVx => write!(f, "vssra.vx"),
            Self::VnsrlWx => write!(f, "vnsrl.wx"),
            Self::VnsraWx => write!(f, "vnsra.wx"),
            Self::VnclipuWx => write!(f, "vnclipu.wx"),
            Self::VnclipWx => write!(f, "vnclip.wx"),
            Self::VaadduVx => write!(f, "vaaddu.vx"),
            Self::VaaddVx => write!(f, "vaadd.vx"),
            Self::VasubuVx => write!(f, "vasubu.vx"),
            Self::VasubVx => write!(f, "vasub.vx"),
            Self::Vslide1upVx => write!(f, "vslide1up.vx"),
            Self::Vslide1downVx => write!(f, "vslide1down.vx"),
            Self::VdivuVx => write!(f, "vdivu.vx"),
            Self::VdivVx => write!(f, "vdiv.vx"),
            Self::VremuVx => write!(f, "vremu.vx"),
            Self::VremVx => write!(f, "vrem.vx"),
            Self::VmulhuVx => write!(f, "vmulhu.vx"),
            Self::VmulVx => write!(f, "vmul.vx"),
            Self::VmulhsuVx => write!(f, "vmulhsu.vx"),
            Self::VmulhVx => write!(f, "vmulh.vx"),
            Self::VmaddVx => write!(f, "vmadd.vx"),
            Self::VnmsubVx => write!(f, "vnmsub.vx"),
            Self::VmaccVx => write!(f, "vmacc.vx"),
            Self::VnmsacVx => write!(f, "vnmsac.vx"),
            Self::VwadduVx => write!(f, "vwaddu.vx"),
            Self::VwaddVx => write!(f, "vwadd.vx"),
            Self::VwsubuVx => write!(f, "vwsubu.vx"),
            Self::VwsubVx => write!(f, "vwsub.vx"),
            Self::VwadduWx => write!(f, "vwaddu.wx"),
            Self::VwaddWx => write!(f, "vwadd.wx"),
            Self::VwsubuWx => write!(f, "vwsubu.wx"),
            Self::VwsubWx => write!(f, "vwsub.wx"),
            Self::VwmuluVx => write!(f, "vwmulu.vx"),
            Self::VwmulsuVx => write!(f, "vwmulsu.vx"),
            Self::VwmulVx => write!(f, "vwmul.vx"),
            Self::VwmaccuVx => write!(f, "vwmaccu.vx"),
            Self::VwmaccVx => write!(f, "vwmacc.vx"),
            Self::VwmaccusVx => write!(f, "vwmaccus.vx"),
            Self::VwmaccsuVx => write!(f, "vwmaccsu.vx"),
        }
    }
}

/// The `Rs1VdVmVs2Wd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1VdVmVs2Wd {
    pub op: OpcodeRs1VdVmVs2Wd,
    pub raw: u32,
    pub rs1: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs2: u32,
    pub wd: u32,
}

impl FormatRs1VdVmVs2Wd {}

/// Opcodes with the `Rs1VdVmVs2Wd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1VdVmVs2Wd {
    Vamoswapei8V,
    Vamoaddei8V,
    Vamoxorei8V,
    Vamoandei8V,
    Vamoorei8V,
    Vamominei8V,
    Vamomaxei8V,
    Vamominuei8V,
    Vamomaxuei8V,
    Vamoswapei16V,
    Vamoaddei16V,
    Vamoxorei16V,
    Vamoandei16V,
    Vamoorei16V,
    Vamominei16V,
    Vamomaxei16V,
    Vamominuei16V,
    Vamomaxuei16V,
    Vamoswapei32V,
    Vamoaddei32V,
    Vamoxorei32V,
    Vamoandei32V,
    Vamoorei32V,
    Vamominei32V,
    Vamomaxei32V,
    Vamominuei32V,
    Vamomaxuei32V,
    Vamoswapei64V,
    Vamoaddei64V,
    Vamoxorei64V,
    Vamoandei64V,
    Vamoorei64V,
    Vamominei64V,
    Vamomaxei64V,
    Vamominuei64V,
    Vamomaxuei64V,
}

impl std::fmt::Display for FormatRs1VdVmVs2Wd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        write!(f, " wd={:x}", self.wd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1VdVmVs2Wd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vamoswapei8V => write!(f, "vamoswapei8.v"),
            Self::Vamoaddei8V => write!(f, "vamoaddei8.v"),
            Self::Vamoxorei8V => write!(f, "vamoxorei8.v"),
            Self::Vamoandei8V => write!(f, "vamoandei8.v"),
            Self::Vamoorei8V => write!(f, "vamoorei8.v"),
            Self::Vamominei8V => write!(f, "vamominei8.v"),
            Self::Vamomaxei8V => write!(f, "vamomaxei8.v"),
            Self::Vamominuei8V => write!(f, "vamominuei8.v"),
            Self::Vamomaxuei8V => write!(f, "vamomaxuei8.v"),
            Self::Vamoswapei16V => write!(f, "vamoswapei16.v"),
            Self::Vamoaddei16V => write!(f, "vamoaddei16.v"),
            Self::Vamoxorei16V => write!(f, "vamoxorei16.v"),
            Self::Vamoandei16V => write!(f, "vamoandei16.v"),
            Self::Vamoorei16V => write!(f, "vamoorei16.v"),
            Self::Vamominei16V => write!(f, "vamominei16.v"),
            Self::Vamomaxei16V => write!(f, "vamomaxei16.v"),
            Self::Vamominuei16V => write!(f, "vamominuei16.v"),
            Self::Vamomaxuei16V => write!(f, "vamomaxuei16.v"),
            Self::Vamoswapei32V => write!(f, "vamoswapei32.v"),
            Self::Vamoaddei32V => write!(f, "vamoaddei32.v"),
            Self::Vamoxorei32V => write!(f, "vamoxorei32.v"),
            Self::Vamoandei32V => write!(f, "vamoandei32.v"),
            Self::Vamoorei32V => write!(f, "vamoorei32.v"),
            Self::Vamominei32V => write!(f, "vamominei32.v"),
            Self::Vamomaxei32V => write!(f, "vamomaxei32.v"),
            Self::Vamominuei32V => write!(f, "vamominuei32.v"),
            Self::Vamomaxuei32V => write!(f, "vamomaxuei32.v"),
            Self::Vamoswapei64V => write!(f, "vamoswapei64.v"),
            Self::Vamoaddei64V => write!(f, "vamoaddei64.v"),
            Self::Vamoxorei64V => write!(f, "vamoxorei64.v"),
            Self::Vamoandei64V => write!(f, "vamoandei64.v"),
            Self::Vamoorei64V => write!(f, "vamoorei64.v"),
            Self::Vamominei64V => write!(f, "vamominei64.v"),
            Self::Vamomaxei64V => write!(f, "vamomaxei64.v"),
            Self::Vamominuei64V => write!(f, "vamominuei64.v"),
            Self::Vamomaxuei64V => write!(f, "vamomaxuei64.v"),
        }
    }
}

/// The `Rs1VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1VdVs2 {
    pub op: OpcodeRs1VdVs2,
    pub raw: u32,
    pub rs1: u32,
    pub vd: u32,
    pub vs2: u32,
}

impl FormatRs1VdVs2 {}

/// Opcodes with the `Rs1VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1VdVs2 {
    VfmergeVfm,
    VadcVxm,
    VmadcVxm,
    VmadcVx,
    VsbcVxm,
    VmsbcVxm,
    VmsbcVx,
    VmergeVxm,
}

impl std::fmt::Display for FormatRs1VdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1VdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VfmergeVfm => write!(f, "vfmerge.vfm"),
            Self::VadcVxm => write!(f, "vadc.vxm"),
            Self::VmadcVxm => write!(f, "vmadc.vxm"),
            Self::VmadcVx => write!(f, "vmadc.vx"),
            Self::VsbcVxm => write!(f, "vsbc.vxm"),
            Self::VmsbcVxm => write!(f, "vmsbc.vxm"),
            Self::VmsbcVx => write!(f, "vmsbc.vx"),
            Self::VmergeVxm => write!(f, "vmerge.vxm"),
        }
    }
}

/// The `Rs1Vs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1Vs3 {
    pub op: OpcodeRs1Vs3,
    pub raw: u32,
    pub rs1: u32,
    pub vs3: u32,
}

impl FormatRs1Vs3 {}

/// Opcodes with the `Rs1Vs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1Vs3 {
    VsmV,
    Vs1rV,
    Vs2rV,
    Vs4rV,
    Vs8rV,
}

impl std::fmt::Display for FormatRs1Vs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " vs3={:x}", self.vs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1Vs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VsmV => write!(f, "vsm.v"),
            Self::Vs1rV => write!(f, "vs1r.v"),
            Self::Vs2rV => write!(f, "vs2r.v"),
            Self::Vs4rV => write!(f, "vs4r.v"),
            Self::Vs8rV => write!(f, "vs8r.v"),
        }
    }
}

/// The `Simm5Vd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatSimm5Vd {
    pub op: OpcodeSimm5Vd,
    pub raw: u32,
    pub simm5: u32,
    pub vd: u32,
}

impl FormatSimm5Vd {}

/// Opcodes with the `Simm5Vd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeSimm5Vd {
    VmvVI,
}

impl std::fmt::Display for FormatSimm5Vd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " simm5={:x}", self.simm5)?;
        write!(f, " vd={:x}", self.vd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeSimm5Vd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VmvVI => write!(f, "vmv.v.i"),
        }
    }
}

/// The `Simm5VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatSimm5VdVmVs2 {
    pub op: OpcodeSimm5VdVmVs2,
    pub raw: u32,
    pub simm5: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs2: u32,
}

impl FormatSimm5VdVmVs2 {}

/// Opcodes with the `Simm5VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeSimm5VdVmVs2 {
    VaddVi,
    VrsubVi,
    VandVi,
    VorVi,
    VxorVi,
    VrgatherVi,
    VslideupVi,
    VslidedownVi,
    VmseqVi,
    VmsneVi,
    VmsleuVi,
    VmsleVi,
    VmsgtuVi,
    VmsgtVi,
    VsadduVi,
    VsaddVi,
    VsllVi,
    VsrlVi,
    VsraVi,
    VssrlVi,
    VssraVi,
    VnsrlWi,
    VnsraWi,
    VnclipuWi,
    VnclipWi,
}

impl std::fmt::Display for FormatSimm5VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " simm5={:x}", self.simm5)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeSimm5VdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VaddVi => write!(f, "vadd.vi"),
            Self::VrsubVi => write!(f, "vrsub.vi"),
            Self::VandVi => write!(f, "vand.vi"),
            Self::VorVi => write!(f, "vor.vi"),
            Self::VxorVi => write!(f, "vxor.vi"),
            Self::VrgatherVi => write!(f, "vrgather.vi"),
            Self::VslideupVi => write!(f, "vslideup.vi"),
            Self::VslidedownVi => write!(f, "vslidedown.vi"),
            Self::VmseqVi => write!(f, "vmseq.vi"),
            Self::VmsneVi => write!(f, "vmsne.vi"),
            Self::VmsleuVi => write!(f, "vmsleu.vi"),
            Self::VmsleVi => write!(f, "vmsle.vi"),
            Self::VmsgtuVi => write!(f, "vmsgtu.vi"),
            Self::VmsgtVi => write!(f, "vmsgt.vi"),
            Self::VsadduVi => write!(f, "vsaddu.vi"),
            Self::VsaddVi => write!(f, "vsadd.vi"),
            Self::VsllVi => write!(f, "vsll.vi"),
            Self::VsrlVi => write!(f, "vsrl.vi"),
            Self::VsraVi => write!(f, "vsra.vi"),
            Self::VssrlVi => write!(f, "vssrl.vi"),
            Self::VssraVi => write!(f, "vssra.vi"),
            Self::VnsrlWi => write!(f, "vnsrl.wi"),
            Self::VnsraWi => write!(f, "vnsra.wi"),
            Self::VnclipuWi => write!(f, "vnclipu.wi"),
            Self::VnclipWi => write!(f, "vnclip.wi"),
        }
    }
}

/// The `Simm5VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatSimm5VdVs2 {
    pub op: OpcodeSimm5VdVs2,
    pub raw: u32,
    pub simm5: u32,
    pub vd: u32,
    pub vs2: u32,
}

impl FormatSimm5VdVs2 {}

/// Opcodes with the `Simm5VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeSimm5VdVs2 {
    VadcVim,
    VmadcVim,
    VmadcVi,
    VmergeVim,
}

impl std::fmt::Display for FormatSimm5VdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " simm5={:x}", self.simm5)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeSimm5VdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VadcVim => write!(f, "vadc.vim"),
            Self::VmadcVim => write!(f, "vmadc.vim"),
            Self::VmadcVi => write!(f, "vmadc.vi"),
            Self::VmergeVim => write!(f, "vmerge.vim"),
        }
    }
}

/// The `VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVm {
    pub op: OpcodeVdVm,
    pub raw: u32,
    pub vd: u32,
    pub vm: u32,
}

impl FormatVdVm {}

/// Opcodes with the `VdVm` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVm {
    VidV,
}

impl std::fmt::Display for FormatVdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVm {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VidV => write!(f, "vid.v"),
        }
    }
}

/// The `VdVmVs1Vs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVmVs1Vs2 {
    pub op: OpcodeVdVmVs1Vs2,
    pub raw: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs1: u32,
    pub vs2: u32,
}

impl FormatVdVmVs1Vs2 {}

/// Opcodes with the `VdVmVs1Vs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVmVs1Vs2 {
    VfaddVv,
    VfredusumVs,
    VfsubVv,
    VfredosumVs,
    VfminVv,
    VfredminVs,
    VfmaxVv,
    VfredmaxVs,
    VfsgnjVv,
    VfsgnjnVv,
    VfsgnjxVv,
    VmfeqVv,
    VmfleVv,
    VmfltVv,
    VmfneVv,
    VfdivVv,
    VfmulVv,
    VfmaddVv,
    VfnmaddVv,
    VfmsubVv,
    VfnmsubVv,
    VfmaccVv,
    VfnmaccVv,
    VfmsacVv,
    VfnmsacVv,
    VfwaddVv,
    VfwredusumVs,
    VfwsubVv,
    VfwredosumVs,
    VfwaddWv,
    VfwsubWv,
    VfwmulVv,
    VfwdotpVv,
    VfwmaccVv,
    VfwnmaccVv,
    VfwmsacVv,
    VfwnmsacVv,
    VaddVv,
    VsubVv,
    VminuVv,
    VminVv,
    VmaxuVv,
    VmaxVv,
    VandVv,
    VorVv,
    VxorVv,
    VrgatherVv,
    Vrgatherei16Vv,
    VmseqVv,
    VmsneVv,
    VmsltuVv,
    VmsltVv,
    VmsleuVv,
    VmsleVv,
    VsadduVv,
    VsaddVv,
    VssubuVv,
    VssubVv,
    VsllVv,
    VsmulVv,
    VsrlVv,
    VsraVv,
    VssrlVv,
    VssraVv,
    VnsrlWv,
    VnsraWv,
    VnclipuWv,
    VnclipWv,
    VwredsumuVs,
    VwredsumVs,
    VredsumVs,
    VredandVs,
    VredorVs,
    VredxorVs,
    VredminuVs,
    VredminVs,
    VredmaxuVs,
    VredmaxVs,
    VaadduVv,
    VaaddVv,
    VasubuVv,
    VasubVv,
    VmandnMm,
    VmandMm,
    VmorMm,
    VmxorMm,
    VmornMm,
    VmnandMm,
    VmnorMm,
    VmxnorMm,
    VdivuVv,
    VdivVv,
    VremuVv,
    VremVv,
    VmulhuVv,
    VmulVv,
    VmulhsuVv,
    VmulhVv,
    VmaddVv,
    VnmsubVv,
    VmaccVv,
    VnmsacVv,
    VwadduVv,
    VwaddVv,
    VwsubuVv,
    VwsubVv,
    VwadduWv,
    VwaddWv,
    VwsubuWv,
    VwsubWv,
    VwmuluVv,
    VwmulsuVv,
    VwmulVv,
    VwmaccuVv,
    VwmaccVv,
    VwmaccsuVv,
}

impl std::fmt::Display for FormatVdVmVs1Vs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs1={:x}", self.vs1)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVmVs1Vs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VfaddVv => write!(f, "vfadd.vv"),
            Self::VfredusumVs => write!(f, "vfredusum.vs"),
            Self::VfsubVv => write!(f, "vfsub.vv"),
            Self::VfredosumVs => write!(f, "vfredosum.vs"),
            Self::VfminVv => write!(f, "vfmin.vv"),
            Self::VfredminVs => write!(f, "vfredmin.vs"),
            Self::VfmaxVv => write!(f, "vfmax.vv"),
            Self::VfredmaxVs => write!(f, "vfredmax.vs"),
            Self::VfsgnjVv => write!(f, "vfsgnj.vv"),
            Self::VfsgnjnVv => write!(f, "vfsgnjn.vv"),
            Self::VfsgnjxVv => write!(f, "vfsgnjx.vv"),
            Self::VmfeqVv => write!(f, "vmfeq.vv"),
            Self::VmfleVv => write!(f, "vmfle.vv"),
            Self::VmfltVv => write!(f, "vmflt.vv"),
            Self::VmfneVv => write!(f, "vmfne.vv"),
            Self::VfdivVv => write!(f, "vfdiv.vv"),
            Self::VfmulVv => write!(f, "vfmul.vv"),
            Self::VfmaddVv => write!(f, "vfmadd.vv"),
            Self::VfnmaddVv => write!(f, "vfnmadd.vv"),
            Self::VfmsubVv => write!(f, "vfmsub.vv"),
            Self::VfnmsubVv => write!(f, "vfnmsub.vv"),
            Self::VfmaccVv => write!(f, "vfmacc.vv"),
            Self::VfnmaccVv => write!(f, "vfnmacc.vv"),
            Self::VfmsacVv => write!(f, "vfmsac.vv"),
            Self::VfnmsacVv => write!(f, "vfnmsac.vv"),
            Self::VfwaddVv => write!(f, "vfwadd.vv"),
            Self::VfwredusumVs => write!(f, "vfwredusum.vs"),
            Self::VfwsubVv => write!(f, "vfwsub.vv"),
            Self::VfwredosumVs => write!(f, "vfwredosum.vs"),
            Self::VfwaddWv => write!(f, "vfwadd.wv"),
            Self::VfwsubWv => write!(f, "vfwsub.wv"),
            Self::VfwmulVv => write!(f, "vfwmul.vv"),
            Self::VfwdotpVv => write!(f, "vfwdotp.vv"),
            Self::VfwmaccVv => write!(f, "vfwmacc.vv"),
            Self::VfwnmaccVv => write!(f, "vfwnmacc.vv"),
            Self::VfwmsacVv => write!(f, "vfwmsac.vv"),
            Self::VfwnmsacVv => write!(f, "vfwnmsac.vv"),
            Self::VaddVv => write!(f, "vadd.vv"),
            Self::VsubVv => write!(f, "vsub.vv"),
            Self::VminuVv => write!(f, "vminu.vv"),
            Self::VminVv => write!(f, "vmin.vv"),
            Self::VmaxuVv => write!(f, "vmaxu.vv"),
            Self::VmaxVv => write!(f, "vmax.vv"),
            Self::VandVv => write!(f, "vand.vv"),
            Self::VorVv => write!(f, "vor.vv"),
            Self::VxorVv => write!(f, "vxor.vv"),
            Self::VrgatherVv => write!(f, "vrgather.vv"),
            Self::Vrgatherei16Vv => write!(f, "vrgatherei16.vv"),
            Self::VmseqVv => write!(f, "vmseq.vv"),
            Self::VmsneVv => write!(f, "vmsne.vv"),
            Self::VmsltuVv => write!(f, "vmsltu.vv"),
            Self::VmsltVv => write!(f, "vmslt.vv"),
            Self::VmsleuVv => write!(f, "vmsleu.vv"),
            Self::VmsleVv => write!(f, "vmsle.vv"),
            Self::VsadduVv => write!(f, "vsaddu.vv"),
            Self::VsaddVv => write!(f, "vsadd.vv"),
            Self::VssubuVv => write!(f, "vssubu.vv"),
            Self::VssubVv => write!(f, "vssub.vv"),
            Self::VsllVv => write!(f, "vsll.vv"),
            Self::VsmulVv => write!(f, "vsmul.vv"),
            Self::VsrlVv => write!(f, "vsrl.vv"),
            Self::VsraVv => write!(f, "vsra.vv"),
            Self::VssrlVv => write!(f, "vssrl.vv"),
            Self::VssraVv => write!(f, "vssra.vv"),
            Self::VnsrlWv => write!(f, "vnsrl.wv"),
            Self::VnsraWv => write!(f, "vnsra.wv"),
            Self::VnclipuWv => write!(f, "vnclipu.wv"),
            Self::VnclipWv => write!(f, "vnclip.wv"),
            Self::VwredsumuVs => write!(f, "vwredsumu.vs"),
            Self::VwredsumVs => write!(f, "vwredsum.vs"),
            Self::VredsumVs => write!(f, "vredsum.vs"),
            Self::VredandVs => write!(f, "vredand.vs"),
            Self::VredorVs => write!(f, "vredor.vs"),
            Self::VredxorVs => write!(f, "vredxor.vs"),
            Self::VredminuVs => write!(f, "vredminu.vs"),
            Self::VredminVs => write!(f, "vredmin.vs"),
            Self::VredmaxuVs => write!(f, "vredmaxu.vs"),
            Self::VredmaxVs => write!(f, "vredmax.vs"),
            Self::VaadduVv => write!(f, "vaaddu.vv"),
            Self::VaaddVv => write!(f, "vaadd.vv"),
            Self::VasubuVv => write!(f, "vasubu.vv"),
            Self::VasubVv => write!(f, "vasub.vv"),
            Self::VmandnMm => write!(f, "vmandn.mm"),
            Self::VmandMm => write!(f, "vmand.mm"),
            Self::VmorMm => write!(f, "vmor.mm"),
            Self::VmxorMm => write!(f, "vmxor.mm"),
            Self::VmornMm => write!(f, "vmorn.mm"),
            Self::VmnandMm => write!(f, "vmnand.mm"),
            Self::VmnorMm => write!(f, "vmnor.mm"),
            Self::VmxnorMm => write!(f, "vmxnor.mm"),
            Self::VdivuVv => write!(f, "vdivu.vv"),
            Self::VdivVv => write!(f, "vdiv.vv"),
            Self::VremuVv => write!(f, "vremu.vv"),
            Self::VremVv => write!(f, "vrem.vv"),
            Self::VmulhuVv => write!(f, "vmulhu.vv"),
            Self::VmulVv => write!(f, "vmul.vv"),
            Self::VmulhsuVv => write!(f, "vmulhsu.vv"),
            Self::VmulhVv => write!(f, "vmulh.vv"),
            Self::VmaddVv => write!(f, "vmadd.vv"),
            Self::VnmsubVv => write!(f, "vnmsub.vv"),
            Self::VmaccVv => write!(f, "vmacc.vv"),
            Self::VnmsacVv => write!(f, "vnmsac.vv"),
            Self::VwadduVv => write!(f, "vwaddu.vv"),
            Self::VwaddVv => write!(f, "vwadd.vv"),
            Self::VwsubuVv => write!(f, "vwsubu.vv"),
            Self::VwsubVv => write!(f, "vwsub.vv"),
            Self::VwadduWv => write!(f, "vwaddu.wv"),
            Self::VwaddWv => write!(f, "vwadd.wv"),
            Self::VwsubuWv => write!(f, "vwsubu.wv"),
            Self::VwsubWv => write!(f, "vwsub.wv"),
            Self::VwmuluVv => write!(f, "vwmulu.vv"),
            Self::VwmulsuVv => write!(f, "vwmulsu.vv"),
            Self::VwmulVv => write!(f, "vwmul.vv"),
            Self::VwmaccuVv => write!(f, "vwmaccu.vv"),
            Self::VwmaccVv => write!(f, "vwmacc.vv"),
            Self::VwmaccsuVv => write!(f, "vwmaccsu.vv"),
        }
    }
}

/// The `VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVmVs2 {
    pub op: OpcodeVdVmVs2,
    pub raw: u32,
    pub vd: u32,
    pub vm: u32,
    pub vs2: u32,
}

impl FormatVdVmVs2 {}

/// Opcodes with the `VdVmVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVmVs2 {
    VfcvtXuFV,
    VfcvtXFV,
    VfcvtFXuV,
    VfcvtFXV,
    VfcvtRtzXuFV,
    VfcvtRtzXFV,
    VfwcvtXuFV,
    VfwcvtXFV,
    VfwcvtFXuV,
    VfwcvtFXV,
    VfwcvtFFV,
    VfwcvtRtzXuFV,
    VfwcvtRtzXFV,
    VfncvtXuFW,
    VfncvtXFW,
    VfncvtFXuW,
    VfncvtFXW,
    VfncvtFFW,
    VfncvtRodFFW,
    VfncvtRtzXuFW,
    VfncvtRtzXFW,
    VfsqrtV,
    Vfrsqrt7V,
    Vfrec7V,
    VfclassV,
    VzextVf8,
    VsextVf8,
    VzextVf4,
    VsextVf4,
    VzextVf2,
    VsextVf2,
    VmsbfM,
    VmsofM,
    VmsifM,
    ViotaM,
}

impl std::fmt::Display for FormatVdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vm={:x}", self.vm)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVmVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VfcvtXuFV => write!(f, "vfcvt.xu.f.v"),
            Self::VfcvtXFV => write!(f, "vfcvt.x.f.v"),
            Self::VfcvtFXuV => write!(f, "vfcvt.f.xu.v"),
            Self::VfcvtFXV => write!(f, "vfcvt.f.x.v"),
            Self::VfcvtRtzXuFV => write!(f, "vfcvt.rtz.xu.f.v"),
            Self::VfcvtRtzXFV => write!(f, "vfcvt.rtz.x.f.v"),
            Self::VfwcvtXuFV => write!(f, "vfwcvt.xu.f.v"),
            Self::VfwcvtXFV => write!(f, "vfwcvt.x.f.v"),
            Self::VfwcvtFXuV => write!(f, "vfwcvt.f.xu.v"),
            Self::VfwcvtFXV => write!(f, "vfwcvt.f.x.v"),
            Self::VfwcvtFFV => write!(f, "vfwcvt.f.f.v"),
            Self::VfwcvtRtzXuFV => write!(f, "vfwcvt.rtz.xu.f.v"),
            Self::VfwcvtRtzXFV => write!(f, "vfwcvt.rtz.x.f.v"),
            Self::VfncvtXuFW => write!(f, "vfncvt.xu.f.w"),
            Self::VfncvtXFW => write!(f, "vfncvt.x.f.w"),
            Self::VfncvtFXuW => write!(f, "vfncvt.f.xu.w"),
            Self::VfncvtFXW => write!(f, "vfncvt.f.x.w"),
            Self::VfncvtFFW => write!(f, "vfncvt.f.f.w"),
            Self::VfncvtRodFFW => write!(f, "vfncvt.rod.f.f.w"),
            Self::VfncvtRtzXuFW => write!(f, "vfncvt.rtz.xu.f.w"),
            Self::VfncvtRtzXFW => write!(f, "vfncvt.rtz.x.f.w"),
            Self::VfsqrtV => write!(f, "vfsqrt.v"),
            Self::Vfrsqrt7V => write!(f, "vfrsqrt7.v"),
            Self::Vfrec7V => write!(f, "vfrec7.v"),
            Self::VfclassV => write!(f, "vfclass.v"),
            Self::VzextVf8 => write!(f, "vzext.vf8"),
            Self::VsextVf8 => write!(f, "vsext.vf8"),
            Self::VzextVf4 => write!(f, "vzext.vf4"),
            Self::VsextVf4 => write!(f, "vsext.vf4"),
            Self::VzextVf2 => write!(f, "vzext.vf2"),
            Self::VsextVf2 => write!(f, "vsext.vf2"),
            Self::VmsbfM => write!(f, "vmsbf.m"),
            Self::VmsofM => write!(f, "vmsof.m"),
            Self::VmsifM => write!(f, "vmsif.m"),
            Self::ViotaM => write!(f, "viota.m"),
        }
    }
}

/// The `VdVs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVs1 {
    pub op: OpcodeVdVs1,
    pub raw: u32,
    pub vd: u32,
    pub vs1: u32,
}

impl FormatVdVs1 {}

/// Opcodes with the `VdVs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVs1 {
    VmvVV,
}

impl std::fmt::Display for FormatVdVs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vs1={:x}", self.vs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VmvVV => write!(f, "vmv.v.v"),
        }
    }
}

/// The `VdVs1Vs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVs1Vs2 {
    pub op: OpcodeVdVs1Vs2,
    pub raw: u32,
    pub vd: u32,
    pub vs1: u32,
    pub vs2: u32,
}

impl FormatVdVs1Vs2 {}

/// Opcodes with the `VdVs1Vs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVs1Vs2 {
    VadcVvm,
    VmadcVvm,
    VmadcVv,
    VsbcVvm,
    VmsbcVvm,
    VmsbcVv,
    VmergeVvm,
    VcompressVm,
}

impl std::fmt::Display for FormatVdVs1Vs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vs1={:x}", self.vs1)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVs1Vs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::VadcVvm => write!(f, "vadc.vvm"),
            Self::VmadcVvm => write!(f, "vmadc.vvm"),
            Self::VmadcVv => write!(f, "vmadc.vv"),
            Self::VsbcVvm => write!(f, "vsbc.vvm"),
            Self::VmsbcVvm => write!(f, "vmsbc.vvm"),
            Self::VmsbcVv => write!(f, "vmsbc.vv"),
            Self::VmergeVvm => write!(f, "vmerge.vvm"),
            Self::VcompressVm => write!(f, "vcompress.vm"),
        }
    }
}

/// The `VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatVdVs2 {
    pub op: OpcodeVdVs2,
    pub raw: u32,
    pub vd: u32,
    pub vs2: u32,
}

impl FormatVdVs2 {}

/// Opcodes with the `VdVs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeVdVs2 {
    Vmv1rV,
    Vmv2rV,
    Vmv4rV,
    Vmv8rV,
}

impl std::fmt::Display for FormatVdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " vd={:x}", self.vd)?;
        write!(f, " vs2={:x}", self.vs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeVdVs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vmv1rV => write!(f, "vmv1r.v"),
            Self::Vmv2rV => write!(f, "vmv2r.v"),
            Self::Vmv4rV => write!(f, "vmv4r.v"),
            Self::Vmv8rV => write!(f, "vmv8r.v"),
        }
    }
}

/// Parse a `u32` into an instruction.
pub fn parse_u32(raw: u32) -> Format {
    match raw & 0x7f {
        0x6f => return parse_jimm20_rd(OpcodeJimm20Rd::Jal, raw),
        0x37 => return parse_imm20_rd(OpcodeImm20Rd::Lui, raw),
        0x17 => return parse_imm20_rd(OpcodeImm20Rd::Auipc, raw),
        0x3f => return parse_imm12_rd_rm_rs1(OpcodeImm12RdRmRs1::Irep, raw),
        _ => (),
    }
    match raw & 0xff {
        0x8b => {
            return parse_imm12_rs1_stagger_mask_stagger_max(
                OpcodeImm12Rs1StaggerMaskStaggerMax::FrepO,
                raw,
            )
        }
        0xb => {
            return parse_imm12_rs1_stagger_mask_stagger_max(
                OpcodeImm12Rs1StaggerMaskStaggerMax::FrepI,
                raw,
            )
        }
        _ => (),
    }
    match raw & 0x707f {
        0x63 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Beq, raw),
        0x1063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bne, raw),
        0x4063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Blt, raw),
        0x5063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bge, raw),
        0x6063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bltu, raw),
        0x7063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bgeu, raw),
        0x67 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Jalr, raw),
        0x13 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addi, raw),
        0x2013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Slti, raw),
        0x3013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Sltiu, raw),
        0x4013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Xori, raw),
        0x6013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ori, raw),
        0x7013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Andi, raw),
        0x3 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lb, raw),
        0x1003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lh, raw),
        0x2003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lw, raw),
        0x4003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lbu, raw),
        0x5003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lhu, raw),
        0x23 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sb, raw),
        0x1023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sh, raw),
        0x2023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sw, raw),
        0xf => return parse_fm_pred_rd_rs1_succ(OpcodeFmPredRdRs1Succ::Fence, raw),
        0x100f => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::FenceI, raw),
        0x1b => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addiw, raw),
        0x3003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ld, raw),
        0x6003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lwu, raw),
        0x3023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sd, raw),
        0x2007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flw, raw),
        0x2027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsw, raw),
        0x3007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Fld, raw),
        0x3027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsd, raw),
        0x4007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flq, raw),
        0x4027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsq, raw),
        0x1073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrw, raw),
        0x2073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrs, raw),
        0x3073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrc, raw),
        0x5073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrwi, raw),
        0x6073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrsi, raw),
        0x7073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrci, raw),
        0x1007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flh, raw),
        0x1027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsh, raw),
        _ => (),
    }
    match raw & 0x7fff {
        0x202b => return parse_imm12_rs1(OpcodeImm12Rs1::Scfgwi, raw),
        _ => (),
    }
    match raw & 0xff07f {
        0x102b => return parse_imm12_rd(OpcodeImm12Rd::Scfgri, raw),
        _ => (),
    }
    match raw & 0x400707f {
        0x4005013 => return parse_rd_rs1_rs3_shamt(OpcodeRdRs1Rs3Shamt::Fsri, raw),
        _ => (),
    }
    match raw & 0x600007f {
        0x43 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddS, raw),
        0x47 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubS, raw),
        0x4b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubS, raw),
        0x4f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddS, raw),
        0x2000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddD, raw),
        0x2000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubD, raw),
        0x200004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubD, raw),
        0x200004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddD, raw),
        0x6000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddQ, raw),
        0x6000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubQ, raw),
        0x600004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubQ, raw),
        0x600004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddQ, raw),
        0x4000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddH, raw),
        0x4000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubH, raw),
        0x400004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubH, raw),
        0x400004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddH, raw),
        _ => (),
    }
    match raw & 0x600707f {
        0x6001033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Cmix, raw),
        0x6005033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Cmov, raw),
        0x4001033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Fsl, raw),
        0x4005033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Fsr, raw),
        _ => (),
    }
    match raw & 0x1c00707f {
        0x4000007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei8V, raw),
        0x4005007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei16V, raw),
        0x4006007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei32V, raw),
        0x4007007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei64V, raw),
        0x14000007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei128V, raw),
        0x14005007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei256V, raw),
        0x14006007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei512V, raw),
        0x14007007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vluxei1024V, raw),
        0x4000027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei8V, raw),
        0x4005027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei16V, raw),
        0x4006027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei32V, raw),
        0x4007027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei64V, raw),
        0x14000027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei128V, raw),
        0x14005027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei256V, raw),
        0x14006027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei512V, raw),
        0x14007027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsuxei1024V, raw),
        0x8000007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse8V, raw),
        0x8005007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse16V, raw),
        0x8006007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse32V, raw),
        0x8007007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse64V, raw),
        0x18000007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse128V, raw),
        0x18005007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse256V, raw),
        0x18006007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse512V, raw),
        0x18007007 => return parse_nf_rs1_rs2_vd_vm(OpcodeNfRs1Rs2VdVm::Vlse1024V, raw),
        0x8000027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse8V, raw),
        0x8005027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse16V, raw),
        0x8006027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse32V, raw),
        0x8007027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse64V, raw),
        0x18000027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse128V, raw),
        0x18005027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse256V, raw),
        0x18006027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse512V, raw),
        0x18007027 => return parse_nf_rs1_rs2_vm_vs3(OpcodeNfRs1Rs2VmVs3::Vsse1024V, raw),
        0xc000007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei8V, raw),
        0xc005007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei16V, raw),
        0xc006007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei32V, raw),
        0xc007007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei64V, raw),
        0x1c000007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei128V, raw),
        0x1c005007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei256V, raw),
        0x1c006007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei512V, raw),
        0x1c007007 => return parse_nf_rs1_vd_vm_vs2(OpcodeNfRs1VdVmVs2::Vloxei1024V, raw),
        0xc000027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei8V, raw),
        0xc005027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei16V, raw),
        0xc006027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei32V, raw),
        0xc007027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei64V, raw),
        0x1c000027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei128V, raw),
        0x1c005027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei256V, raw),
        0x1c006027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei512V, raw),
        0x1c007027 => return parse_nf_rs1_vm_vs2_vs3(OpcodeNfRs1VmVs2Vs3::Vsoxei1024V, raw),
        _ => (),
    }
    match raw & 0x1df0707f {
        0x7 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle8V, raw),
        0x5007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle16V, raw),
        0x6007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle32V, raw),
        0x7007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle64V, raw),
        0x10000007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle128V, raw),
        0x10005007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle256V, raw),
        0x10006007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle512V, raw),
        0x10007007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle1024V, raw),
        0x27 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse8V, raw),
        0x5027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse16V, raw),
        0x6027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse32V, raw),
        0x7027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse64V, raw),
        0x10000027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse128V, raw),
        0x10005027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse256V, raw),
        0x10006027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse512V, raw),
        0x10007027 => return parse_nf_rs1_vm_vs3(OpcodeNfRs1VmVs3::Vse1024V, raw),
        0x1000007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle8ffV, raw),
        0x1005007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle16ffV, raw),
        0x1006007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle32ffV, raw),
        0x1007007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle64ffV, raw),
        0x11000007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle128ffV, raw),
        0x11005007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle256ffV, raw),
        0x11006007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle512ffV, raw),
        0x11007007 => return parse_nf_rs1_vd_vm(OpcodeNfRs1VdVm::Vle1024ffV, raw),
        _ => (),
    }
    match raw & 0x8000707f {
        0x7057 => return parse_rd_rs1_zimm11(OpcodeRdRs1Zimm11::Vsetvli, raw),
        _ => (),
    }
    match raw & 0xc000707f {
        0xc0007057 => return parse_rd_zimm_zimm10(OpcodeRdZimmZimm10::Vsetivli, raw),
        _ => (),
    }
    match raw & 0xf800707f {
        0x202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddW, raw),
        0x2000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorW, raw),
        0x4000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorW, raw),
        0x6000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandW, raw),
        0x8000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominW, raw),
        0xa000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxW, raw),
        0xc000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuW, raw),
        0xe000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuW, raw),
        0x800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapW, raw),
        0x1800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScW, raw),
        0x302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddD, raw),
        0x2000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorD, raw),
        0x4000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorD, raw),
        0x6000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandD, raw),
        0x8000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominD, raw),
        0xa000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxD, raw),
        0xc000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuD, raw),
        0xe000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuD, raw),
        0x800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapD, raw),
        0x1800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScD, raw),
        0x800002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoswapei8V, raw),
        0x2f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoaddei8V, raw),
        0x2000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoxorei8V, raw),
        0x6000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoandei8V, raw),
        0x4000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoorei8V, raw),
        0x8000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominei8V, raw),
        0xa000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxei8V, raw),
        0xc000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominuei8V, raw),
        0xe000002f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxuei8V, raw),
        0x800502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoswapei16V, raw),
        0x502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoaddei16V, raw),
        0x2000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoxorei16V, raw),
        0x6000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoandei16V, raw),
        0x4000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoorei16V, raw),
        0x8000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominei16V, raw),
        0xa000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxei16V, raw),
        0xc000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominuei16V, raw),
        0xe000502f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxuei16V, raw),
        0x800602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoswapei32V, raw),
        0x602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoaddei32V, raw),
        0x2000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoxorei32V, raw),
        0x6000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoandei32V, raw),
        0x4000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoorei32V, raw),
        0x8000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominei32V, raw),
        0xa000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxei32V, raw),
        0xc000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominuei32V, raw),
        0xe000602f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxuei32V, raw),
        0x800702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoswapei64V, raw),
        0x702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoaddei64V, raw),
        0x2000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoxorei64V, raw),
        0x6000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoandei64V, raw),
        0x4000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamoorei64V, raw),
        0x8000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominei64V, raw),
        0xa000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxei64V, raw),
        0xc000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamominuei64V, raw),
        0xe000702f => return parse_rs1_vd_vm_vs2_wd(OpcodeRs1VdVmVs2Wd::Vamomaxuei64V, raw),
        _ => (),
    }
    match raw & 0xf9f0707f {
        0x1000202f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrW, raw),
        0x1000302f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrD, raw),
        _ => (),
    }
    match raw & 0xfc00707f {
        0x1013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Slli, raw),
        0x5013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srli, raw),
        0x40005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srai, raw),
        0x20001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sloi, raw),
        0x20005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sroi, raw),
        0x60005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Rori, raw),
        0x48001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbclri, raw),
        0x28001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbseti, raw),
        0x68001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbinvi, raw),
        0x48005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbexti, raw),
        0x28005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Gorci, raw),
        0x68005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Grevi, raw),
        0x5057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfaddVf, raw),
        0x8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfsubVf, raw),
        0x10005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfminVf, raw),
        0x18005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmaxVf, raw),
        0x20005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfsgnjVf, raw),
        0x24005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfsgnjnVf, raw),
        0x28005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfsgnjxVf, raw),
        0x38005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::Vfslide1upVf, raw),
        0x3c005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::Vfslide1downVf, raw),
        0x60005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfeqVf, raw),
        0x64005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfleVf, raw),
        0x6c005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfltVf, raw),
        0x70005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfneVf, raw),
        0x74005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfgtVf, raw),
        0x7c005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmfgeVf, raw),
        0x80005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfdivVf, raw),
        0x84005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfrdivVf, raw),
        0x90005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmulVf, raw),
        0x9c005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfrsubVf, raw),
        0xa0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmaddVf, raw),
        0xa4005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfnmaddVf, raw),
        0xa8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmsubVf, raw),
        0xac005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfnmsubVf, raw),
        0xb0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmaccVf, raw),
        0xb4005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfnmaccVf, raw),
        0xb8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfmsacVf, raw),
        0xbc005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfnmsacVf, raw),
        0xc0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwaddVf, raw),
        0xc8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwsubVf, raw),
        0xd0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwaddWf, raw),
        0xd8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwsubWf, raw),
        0xe0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwmulVf, raw),
        0xec005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwdotpVf, raw),
        0xf0005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwmaccVf, raw),
        0xf4005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwnmaccVf, raw),
        0xf8005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwmsacVf, raw),
        0xfc005057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VfwnmsacVf, raw),
        0x1057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfaddVv, raw),
        0x4001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfredusumVs, raw),
        0x8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfsubVv, raw),
        0xc001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfredosumVs, raw),
        0x10001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfminVv, raw),
        0x14001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfredminVs, raw),
        0x18001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmaxVv, raw),
        0x1c001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfredmaxVs, raw),
        0x20001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfsgnjVv, raw),
        0x24001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfsgnjnVv, raw),
        0x28001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfsgnjxVv, raw),
        0x60001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmfeqVv, raw),
        0x64001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmfleVv, raw),
        0x6c001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmfltVv, raw),
        0x70001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmfneVv, raw),
        0x80001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfdivVv, raw),
        0x90001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmulVv, raw),
        0xa0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmaddVv, raw),
        0xa4001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfnmaddVv, raw),
        0xa8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmsubVv, raw),
        0xac001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfnmsubVv, raw),
        0xb0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmaccVv, raw),
        0xb4001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfnmaccVv, raw),
        0xb8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfmsacVv, raw),
        0xbc001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfnmsacVv, raw),
        0xc0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwaddVv, raw),
        0xc4001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwredusumVs, raw),
        0xc8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwsubVv, raw),
        0xcc001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwredosumVs, raw),
        0xd0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwaddWv, raw),
        0xd8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwsubWv, raw),
        0xe0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwmulVv, raw),
        0xec001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwdotpVv, raw),
        0xf0001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwmaccVv, raw),
        0xf4001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwnmaccVv, raw),
        0xf8001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwmsacVv, raw),
        0xfc001057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VfwnmsacVv, raw),
        0x4057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VaddVx, raw),
        0x8004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsubVx, raw),
        0xc004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VrsubVx, raw),
        0x10004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VminuVx, raw),
        0x14004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VminVx, raw),
        0x18004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmaxuVx, raw),
        0x1c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmaxVx, raw),
        0x24004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VandVx, raw),
        0x28004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VorVx, raw),
        0x2c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VxorVx, raw),
        0x30004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VrgatherVx, raw),
        0x38004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VslideupVx, raw),
        0x3c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VslidedownVx, raw),
        0x60004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmseqVx, raw),
        0x64004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsneVx, raw),
        0x68004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsltuVx, raw),
        0x6c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsltVx, raw),
        0x70004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsleuVx, raw),
        0x74004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsleVx, raw),
        0x78004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsgtuVx, raw),
        0x7c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmsgtVx, raw),
        0x80004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsadduVx, raw),
        0x84004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsaddVx, raw),
        0x88004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VssubuVx, raw),
        0x8c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VssubVx, raw),
        0x94004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsllVx, raw),
        0x9c004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsmulVx, raw),
        0xa0004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsrlVx, raw),
        0xa4004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VsraVx, raw),
        0xa8004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VssrlVx, raw),
        0xac004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VssraVx, raw),
        0xb0004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnsrlWx, raw),
        0xb4004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnsraWx, raw),
        0xb8004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnclipuWx, raw),
        0xbc004057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnclipWx, raw),
        0x57 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VaddVv, raw),
        0x8000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsubVv, raw),
        0x10000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VminuVv, raw),
        0x14000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VminVv, raw),
        0x18000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmaxuVv, raw),
        0x1c000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmaxVv, raw),
        0x24000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VandVv, raw),
        0x28000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VorVv, raw),
        0x2c000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VxorVv, raw),
        0x30000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VrgatherVv, raw),
        0x38000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::Vrgatherei16Vv, raw),
        0x60000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmseqVv, raw),
        0x64000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmsneVv, raw),
        0x68000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmsltuVv, raw),
        0x6c000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmsltVv, raw),
        0x70000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmsleuVv, raw),
        0x74000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmsleVv, raw),
        0x80000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsadduVv, raw),
        0x84000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsaddVv, raw),
        0x88000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VssubuVv, raw),
        0x8c000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VssubVv, raw),
        0x94000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsllVv, raw),
        0x9c000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsmulVv, raw),
        0xa0000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsrlVv, raw),
        0xa4000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VsraVv, raw),
        0xa8000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VssrlVv, raw),
        0xac000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VssraVv, raw),
        0xb0000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnsrlWv, raw),
        0xb4000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnsraWv, raw),
        0xb8000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnclipuWv, raw),
        0xbc000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnclipWv, raw),
        0xc0000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwredsumuVs, raw),
        0xc4000057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwredsumVs, raw),
        0x3057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VaddVi, raw),
        0xc003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VrsubVi, raw),
        0x24003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VandVi, raw),
        0x28003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VorVi, raw),
        0x2c003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VxorVi, raw),
        0x30003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VrgatherVi, raw),
        0x38003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VslideupVi, raw),
        0x3c003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VslidedownVi, raw),
        0x60003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmseqVi, raw),
        0x64003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmsneVi, raw),
        0x70003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmsleuVi, raw),
        0x74003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmsleVi, raw),
        0x78003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmsgtuVi, raw),
        0x7c003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VmsgtVi, raw),
        0x80003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VsadduVi, raw),
        0x84003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VsaddVi, raw),
        0x94003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VsllVi, raw),
        0xa0003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VsrlVi, raw),
        0xa4003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VsraVi, raw),
        0xa8003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VssrlVi, raw),
        0xac003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VssraVi, raw),
        0xb0003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VnsrlWi, raw),
        0xb4003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VnsraWi, raw),
        0xb8003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VnclipuWi, raw),
        0xbc003057 => return parse_simm5_vd_vm_vs2(OpcodeSimm5VdVmVs2::VnclipWi, raw),
        0x2057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredsumVs, raw),
        0x4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredandVs, raw),
        0x8002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredorVs, raw),
        0xc002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredxorVs, raw),
        0x10002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredminuVs, raw),
        0x14002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredminVs, raw),
        0x18002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredmaxuVs, raw),
        0x1c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VredmaxVs, raw),
        0x20002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VaadduVv, raw),
        0x24002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VaaddVv, raw),
        0x28002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VasubuVv, raw),
        0x2c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VasubVv, raw),
        0x60002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmandnMm, raw),
        0x64002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmandMm, raw),
        0x68002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmorMm, raw),
        0x6c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmxorMm, raw),
        0x70002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmornMm, raw),
        0x74002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmnandMm, raw),
        0x78002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmnorMm, raw),
        0x7c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmxnorMm, raw),
        0x80002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VdivuVv, raw),
        0x84002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VdivVv, raw),
        0x88002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VremuVv, raw),
        0x8c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VremVv, raw),
        0x90002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmulhuVv, raw),
        0x94002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmulVv, raw),
        0x98002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmulhsuVv, raw),
        0x9c002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmulhVv, raw),
        0xa4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmaddVv, raw),
        0xac002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnmsubVv, raw),
        0xb4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VmaccVv, raw),
        0xbc002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VnmsacVv, raw),
        0xc0002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwadduVv, raw),
        0xc4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwaddVv, raw),
        0xc8002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwsubuVv, raw),
        0xcc002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwsubVv, raw),
        0xd0002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwadduWv, raw),
        0xd4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwaddWv, raw),
        0xd8002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwsubuWv, raw),
        0xdc002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwsubWv, raw),
        0xe0002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmuluVv, raw),
        0xe8002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmulsuVv, raw),
        0xec002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmulVv, raw),
        0xf0002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmaccuVv, raw),
        0xf4002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmaccVv, raw),
        0xfc002057 => return parse_vd_vm_vs1_vs2(OpcodeVdVmVs1Vs2::VwmaccsuVv, raw),
        0x20006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VaadduVx, raw),
        0x24006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VaaddVx, raw),
        0x28006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VasubuVx, raw),
        0x2c006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VasubVx, raw),
        0x38006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::Vslide1upVx, raw),
        0x3c006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::Vslide1downVx, raw),
        0x80006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VdivuVx, raw),
        0x84006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VdivVx, raw),
        0x88006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VremuVx, raw),
        0x8c006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VremVx, raw),
        0x90006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmulhuVx, raw),
        0x94006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmulVx, raw),
        0x98006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmulhsuVx, raw),
        0x9c006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmulhVx, raw),
        0xa4006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmaddVx, raw),
        0xac006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnmsubVx, raw),
        0xb4006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VmaccVx, raw),
        0xbc006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VnmsacVx, raw),
        0xc0006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwadduVx, raw),
        0xc4006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwaddVx, raw),
        0xc8006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwsubuVx, raw),
        0xcc006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwsubVx, raw),
        0xd0006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwadduWx, raw),
        0xd4006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwaddWx, raw),
        0xd8006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwsubuWx, raw),
        0xdc006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwsubWx, raw),
        0xe0006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmuluVx, raw),
        0xe8006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmulsuVx, raw),
        0xec006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmulVx, raw),
        0xf0006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmaccuVx, raw),
        0xf4006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmaccVx, raw),
        0xf8006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmaccusVx, raw),
        0xfc006057 => return parse_rs1_vd_vm_vs2(OpcodeRs1VdVmVs2::VwmaccsuVx, raw),
        _ => (),
    }
    match raw & 0xfc0ff07f {
        0x48001057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtXuFV, raw),
        0x48009057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtXFV, raw),
        0x48011057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtFXuV, raw),
        0x48019057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtFXV, raw),
        0x48031057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtRtzXuFV, raw),
        0x48039057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfcvtRtzXFV, raw),
        0x48041057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtXuFV, raw),
        0x48049057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtXFV, raw),
        0x48051057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtFXuV, raw),
        0x48059057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtFXV, raw),
        0x48061057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtFFV, raw),
        0x48071057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtRtzXuFV, raw),
        0x48079057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfwcvtRtzXFV, raw),
        0x48081057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtXuFW, raw),
        0x48089057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtXFW, raw),
        0x48091057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtFXuW, raw),
        0x48099057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtFXW, raw),
        0x480a1057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtFFW, raw),
        0x480a9057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtRodFFW, raw),
        0x480b1057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtRtzXuFW, raw),
        0x480b9057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfncvtRtzXFW, raw),
        0x4c001057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfsqrtV, raw),
        0x4c021057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::Vfrsqrt7V, raw),
        0x4c029057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::Vfrec7V, raw),
        0x4c081057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VfclassV, raw),
        0x48012057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VzextVf8, raw),
        0x4801a057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VsextVf8, raw),
        0x48022057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VzextVf4, raw),
        0x4802a057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VsextVf4, raw),
        0x48032057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VzextVf2, raw),
        0x4803a057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VsextVf2, raw),
        0x5000a057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VmsbfM, raw),
        0x50012057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VmsofM, raw),
        0x5001a057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::VmsifM, raw),
        0x50082057 => return parse_vd_vm_vs2(OpcodeVdVmVs2::ViotaM, raw),
        0x40082057 => return parse_rd_vm_vs2(OpcodeRdVmVs2::VcpopM, raw),
        0x4008a057 => return parse_rd_vm_vs2(OpcodeRdVmVs2::VfirstM, raw),
        _ => (),
    }
    match raw & 0xfdfff07f {
        0x5008a057 => return parse_vd_vm(OpcodeVdVm::VidV, raw),
        _ => (),
    }
    match raw & 0xfe00007f {
        0x53 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddS, raw),
        0x8000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubS, raw),
        0x10000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulS, raw),
        0x18000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivS, raw),
        0x2000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddD, raw),
        0xa000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubD, raw),
        0x12000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulD, raw),
        0x1a000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivD, raw),
        0x6000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddQ, raw),
        0xe000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubQ, raw),
        0x16000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulQ, raw),
        0x1e000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivQ, raw),
        0x4000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddH, raw),
        0xc000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubH, raw),
        0x14000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulH, raw),
        0x1c000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivH, raw),
        _ => (),
    }
    match raw & 0xfe00707f {
        0x33 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Add, raw),
        0x40000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sub, raw),
        0x1033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sll, raw),
        0x2033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Slt, raw),
        0x3033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sltu, raw),
        0x4033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Xor, raw),
        0x5033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srl, raw),
        0x40005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sra, raw),
        0x6033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Or, raw),
        0x7033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::And, raw),
        0x101b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Slliw, raw),
        0x501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Srliw, raw),
        0x4000501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Sraiw, raw),
        0x3b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Addw, raw),
        0x4000003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Subw, raw),
        0x103b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sllw, raw),
        0x503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srlw, raw),
        0x4000503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sraw, raw),
        0x2000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mul, raw),
        0x2001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulh, raw),
        0x2002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhsu, raw),
        0x2003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhu, raw),
        0x2004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Div, raw),
        0x2005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divu, raw),
        0x2006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Rem, raw),
        0x2007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remu, raw),
        0x200003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulw, raw),
        0x200403b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divw, raw),
        0x200503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divuw, raw),
        0x200603b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remw, raw),
        0x200703b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remuw, raw),
        0x20000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjS, raw),
        0x20001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnS, raw),
        0x20002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxS, raw),
        0x28000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminS, raw),
        0x28001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxS, raw),
        0xa0000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleS, raw),
        0xa0001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltS, raw),
        0xa0002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqS, raw),
        0x22000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjD, raw),
        0x22001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnD, raw),
        0x22002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxD, raw),
        0x2a000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminD, raw),
        0x2a001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxD, raw),
        0xa2000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleD, raw),
        0xa2001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltD, raw),
        0xa2002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqD, raw),
        0x26000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjQ, raw),
        0x26001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnQ, raw),
        0x26002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxQ, raw),
        0x2e000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminQ, raw),
        0x2e001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxQ, raw),
        0xa6000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleQ, raw),
        0xa6001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltQ, raw),
        0xa6002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqQ, raw),
        0x40007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Andn, raw),
        0x40006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Orn, raw),
        0x40004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Xnor, raw),
        0x20001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Slo, raw),
        0x20005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sro, raw),
        0x60001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Rol, raw),
        0x60005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Ror, raw),
        0x48001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbclr, raw),
        0x28001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbset, raw),
        0x68001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbinv, raw),
        0x48005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbext, raw),
        0x28005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Gorc, raw),
        0x68005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Grev, raw),
        0x20002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh1add, raw),
        0x20004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh2add, raw),
        0x20006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh3add, raw),
        0xa001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmul, raw),
        0xa002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmulr, raw),
        0xa003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmulh, raw),
        0xa004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Min, raw),
        0xa005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Max, raw),
        0xa006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Minu, raw),
        0xa007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Maxu, raw),
        0x8001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Shfl, raw),
        0x8005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Unshfl, raw),
        0x8006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bext, raw),
        0x48006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bdep, raw),
        0x8004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Pack, raw),
        0x48004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Packu, raw),
        0x8007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Packh, raw),
        0x48007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bfp, raw),
        0x8001013 => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Shfli, raw),
        0x8005013 => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Unshfli, raw),
        0x400002b => return parse_imm5_rd_rs1(OpcodeImm5RdRs1::Dmcpyi, raw),
        0x600002b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Dmcpy, raw),
        0x24000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjH, raw),
        0x24001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnH, raw),
        0x24002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxH, raw),
        0x2c000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminH, raw),
        0x2c001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxH, raw),
        0xa4002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqH, raw),
        0xa4001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltH, raw),
        0xa4000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleH, raw),
        0x80007057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Vsetvl, raw),
        0x5c005057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VfmergeVfm, raw),
        0x40004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VadcVxm, raw),
        0x44004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VmadcVxm, raw),
        0x46004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VmadcVx, raw),
        0x48004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VsbcVxm, raw),
        0x4c004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VmsbcVxm, raw),
        0x4e004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VmsbcVx, raw),
        0x5c004057 => return parse_rs1_vd_vs2(OpcodeRs1VdVs2::VmergeVxm, raw),
        0x40000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VadcVvm, raw),
        0x44000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VmadcVvm, raw),
        0x46000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VmadcVv, raw),
        0x48000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VsbcVvm, raw),
        0x4c000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VmsbcVvm, raw),
        0x4e000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VmsbcVv, raw),
        0x5c000057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VmergeVvm, raw),
        0x40003057 => return parse_simm5_vd_vs2(OpcodeSimm5VdVs2::VadcVim, raw),
        0x44003057 => return parse_simm5_vd_vs2(OpcodeSimm5VdVs2::VmadcVim, raw),
        0x46003057 => return parse_simm5_vd_vs2(OpcodeSimm5VdVs2::VmadcVi, raw),
        0x5c003057 => return parse_simm5_vd_vs2(OpcodeSimm5VdVs2::VmergeVim, raw),
        0x5e002057 => return parse_vd_vs1_vs2(OpcodeVdVs1Vs2::VcompressVm, raw),
        _ => (),
    }
    match raw & 0xfe007fff {
        0x22000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceVvma, raw),
        0x62000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceGvma, raw),
        0x62004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvB, raw),
        0x66004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvH, raw),
        0x6a004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvW, raw),
        0x6e004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvD, raw),
        0x12000073 => return parse_rs1_rs2(OpcodeRs1Rs2::SfenceVma, raw),
        0x2b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmsrc, raw),
        0x200002b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmdst, raw),
        0xc00002b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmstr, raw),
        0x20ab => return parse_rs1_rs2(OpcodeRs1Rs2::Scfgw, raw),
        _ => (),
    }
    match raw & 0xfe0ff07f {
        0x800002b => return parse_imm5_rd(OpcodeImm5Rd::Dmstati, raw),
        0xa00002b => return parse_rd_rs2(OpcodeRdRs2::Dmstat, raw),
        0x902b => return parse_rd_rs2(OpcodeRdRs2::Scfgr, raw),
        0x42001057 => return parse_rd_vs2(OpcodeRdVs2::VfmvFS, raw),
        0x9e003057 => return parse_vd_vs2(OpcodeVdVs2::Vmv1rV, raw),
        0x9e00b057 => return parse_vd_vs2(OpcodeVdVs2::Vmv2rV, raw),
        0x9e01b057 => return parse_vd_vs2(OpcodeVdVs2::Vmv4rV, raw),
        0x9e03b057 => return parse_vd_vs2(OpcodeVdVs2::Vmv8rV, raw),
        0x42002057 => return parse_rd_vs2(OpcodeRdVs2::VmvXS, raw),
        _ => (),
    }
    match raw & 0xfff0007f {
        0x58000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtS, raw),
        0xc0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWS, raw),
        0xc0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuS, raw),
        0xd0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSW, raw),
        0xd0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSWu, raw),
        0xc0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLS, raw),
        0xc0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuS, raw),
        0xd0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSL, raw),
        0xd0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSLu, raw),
        0x40100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSD, raw),
        0x42000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDS, raw),
        0x5a000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtD, raw),
        0xc2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWD, raw),
        0xc2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuD, raw),
        0xd2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDW, raw),
        0xd2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDWu, raw),
        0xc2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLD, raw),
        0xc2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuD, raw),
        0xd2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDL, raw),
        0xd2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDLu, raw),
        0x40300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSQ, raw),
        0x46000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQS, raw),
        0x42300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDQ, raw),
        0x46100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQD, raw),
        0x5e000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtQ, raw),
        0xc6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWQ, raw),
        0xc6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuQ, raw),
        0xd6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQW, raw),
        0xd6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQWu, raw),
        0xc6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLQ, raw),
        0xc6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuQ, raw),
        0xd6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQL, raw),
        0xd6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQLu, raw),
        0x5c000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtH, raw),
        0xc4000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWH, raw),
        0xc4100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuH, raw),
        0xd4000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHW, raw),
        0xd4100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHWu, raw),
        0xc4200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLH, raw),
        0xc4300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuH, raw),
        0xd4200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHL, raw),
        0xd4300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHLu, raw),
        0x44000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHS, raw),
        0x44100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHD, raw),
        0x44200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHH, raw),
        0x46200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtBH, raw),
        _ => (),
    }
    match raw & 0xfff0707f {
        0x60004073 => return parse_rd_rs1(OpcodeRdRs1::HlvB, raw),
        0x60104073 => return parse_rd_rs1(OpcodeRdRs1::HlvBu, raw),
        0x64004073 => return parse_rd_rs1(OpcodeRdRs1::HlvH, raw),
        0x64104073 => return parse_rd_rs1(OpcodeRdRs1::HlvHu, raw),
        0x64304073 => return parse_rd_rs1(OpcodeRdRs1::HlvxHu, raw),
        0x68004073 => return parse_rd_rs1(OpcodeRdRs1::HlvW, raw),
        0x68304073 => return parse_rd_rs1(OpcodeRdRs1::HlvxWu, raw),
        0x68104073 => return parse_rd_rs1(OpcodeRdRs1::HlvWu, raw),
        0x6c004073 => return parse_rd_rs1(OpcodeRdRs1::HlvD, raw),
        0xe0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXW, raw),
        0xe0001053 => return parse_rd_rs1(OpcodeRdRs1::FclassS, raw),
        0xf0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvWX, raw),
        0xe2001053 => return parse_rd_rs1(OpcodeRdRs1::FclassD, raw),
        0xe2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXD, raw),
        0xf2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvDX, raw),
        0xe6001053 => return parse_rd_rs1(OpcodeRdRs1::FclassQ, raw),
        0x60001013 => return parse_rd_rs1(OpcodeRdRs1::Clz, raw),
        0x60101013 => return parse_rd_rs1(OpcodeRdRs1::Ctz, raw),
        0x60201013 => return parse_rd_rs1(OpcodeRdRs1::Pcnt, raw),
        0x60401013 => return parse_rd_rs1(OpcodeRdRs1::SextB, raw),
        0x60501013 => return parse_rd_rs1(OpcodeRdRs1::SextH, raw),
        0x61001013 => return parse_rd_rs1(OpcodeRdRs1::Crc32B, raw),
        0x61101013 => return parse_rd_rs1(OpcodeRdRs1::Crc32H, raw),
        0x61201013 => return parse_rd_rs1(OpcodeRdRs1::Crc32W, raw),
        0x61801013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cB, raw),
        0x61901013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cH, raw),
        0x61a01013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cW, raw),
        0xe4000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXH, raw),
        0xe4001053 => return parse_rd_rs1(OpcodeRdRs1::FclassH, raw),
        0xf4000053 => return parse_rd_rs1(OpcodeRdRs1::FmvHX, raw),
        0x40200053 => return parse_rd_rs1(OpcodeRdRs1::FcvtSH, raw),
        0x42200053 => return parse_rd_rs1(OpcodeRdRs1::FcvtDH, raw),
        0x44300053 => return parse_rd_rs1(OpcodeRdRs1::FcvtHB, raw),
        0x46300053 => return parse_rd_rs1(OpcodeRdRs1::FcvtBB, raw),
        0x2b00007 => return parse_rs1_vd(OpcodeRs1Vd::VlmV, raw),
        0x2b00027 => return parse_rs1_vs3(OpcodeRs1Vs3::VsmV, raw),
        0x2800007 => return parse_rs1_vd(OpcodeRs1Vd::Vl1re8V, raw),
        0x2805007 => return parse_rs1_vd(OpcodeRs1Vd::Vl1re16V, raw),
        0x2806007 => return parse_rs1_vd(OpcodeRs1Vd::Vl1re32V, raw),
        0x2807007 => return parse_rs1_vd(OpcodeRs1Vd::Vl1re64V, raw),
        0x22800007 => return parse_rs1_vd(OpcodeRs1Vd::Vl2re8V, raw),
        0x22805007 => return parse_rs1_vd(OpcodeRs1Vd::Vl2re16V, raw),
        0x22806007 => return parse_rs1_vd(OpcodeRs1Vd::Vl2re32V, raw),
        0x22807007 => return parse_rs1_vd(OpcodeRs1Vd::Vl2re64V, raw),
        0x62800007 => return parse_rs1_vd(OpcodeRs1Vd::Vl4re8V, raw),
        0x62805007 => return parse_rs1_vd(OpcodeRs1Vd::Vl4re16V, raw),
        0x62806007 => return parse_rs1_vd(OpcodeRs1Vd::Vl4re32V, raw),
        0x62807007 => return parse_rs1_vd(OpcodeRs1Vd::Vl4re64V, raw),
        0xe2800007 => return parse_rs1_vd(OpcodeRs1Vd::Vl8re8V, raw),
        0xe2805007 => return parse_rs1_vd(OpcodeRs1Vd::Vl8re16V, raw),
        0xe2806007 => return parse_rs1_vd(OpcodeRs1Vd::Vl8re32V, raw),
        0xe2807007 => return parse_rs1_vd(OpcodeRs1Vd::Vl8re64V, raw),
        0x2800027 => return parse_rs1_vs3(OpcodeRs1Vs3::Vs1rV, raw),
        0x22800027 => return parse_rs1_vs3(OpcodeRs1Vs3::Vs2rV, raw),
        0x62800027 => return parse_rs1_vs3(OpcodeRs1Vs3::Vs4rV, raw),
        0xe2800027 => return parse_rs1_vs3(OpcodeRs1Vs3::Vs8rV, raw),
        0x42005057 => return parse_rs1_vd(OpcodeRs1Vd::VfmvSF, raw),
        0x5e005057 => return parse_rs1_vd(OpcodeRs1Vd::VfmvVF, raw),
        0x5e004057 => return parse_rs1_vd(OpcodeRs1Vd::VmvVX, raw),
        0x5e000057 => return parse_vd_vs1(OpcodeVdVs1::VmvVV, raw),
        0x5e003057 => return parse_simm5_vd(OpcodeSimm5Vd::VmvVI, raw),
        0x42006057 => return parse_rs1_vd(OpcodeRs1Vd::VmvSX, raw),
        _ => (),
    }
    match raw & 0xfff07fff {
        0xe00002b => return parse_rs1(OpcodeRs1::Dmrep, raw),
        _ => (),
    }
    match raw & 0xffffffff {
        0x73 => return parse_unit(OpcodeUnit::Ecall, raw),
        0x100073 => return parse_unit(OpcodeUnit::Ebreak, raw),
        0x200073 => return parse_unit(OpcodeUnit::Uret, raw),
        0x10200073 => return parse_unit(OpcodeUnit::Sret, raw),
        0x30200073 => return parse_unit(OpcodeUnit::Mret, raw),
        0x7b200073 => return parse_unit(OpcodeUnit::Dret, raw),
        0x10500073 => return parse_unit(OpcodeUnit::Wfi, raw),
        _ => (),
    }
    Format::Illegal(raw)
}

/// Parse the first bytes of a `&[u8]` slice into an instruction.
pub fn parse(mut raw: &[u8]) -> Format {
    use byteorder::{LittleEndian, ReadBytesExt};
    raw.read_u32::<LittleEndian>()
        .map(parse_u32)
        .unwrap_or(Format::Illegal(0))
}

/// Parse an instruction with the `Unit` format.
pub fn parse_unit(op: OpcodeUnit, raw: u32) -> Format {
    Format::Unit(FormatUnit { op, raw })
}

/// Parse an instruction with the `AqrlRdRs1` format.
pub fn parse_aqrl_rd_rs1(op: OpcodeAqrlRdRs1, raw: u32) -> Format {
    Format::AqrlRdRs1(FormatAqrlRdRs1 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `AqrlRdRs1Rs2` format.
pub fn parse_aqrl_rd_rs1_rs2(op: OpcodeAqrlRdRs1Rs2, raw: u32) -> Format {
    Format::AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Bimm12hiBimm12loRs1Rs2` format.
pub fn parse_bimm12hi_bimm12lo_rs1_rs2(op: OpcodeBimm12hiBimm12loRs1Rs2, raw: u32) -> Format {
    Format::Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2 {
        op,
        raw,
        bimm12hi: (raw >> 25) & 0x7f,
        bimm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `FmPredRdRs1Succ` format.
pub fn parse_fm_pred_rd_rs1_succ(op: OpcodeFmPredRdRs1Succ, raw: u32) -> Format {
    Format::FmPredRdRs1Succ(FormatFmPredRdRs1Succ {
        op,
        raw,
        fm: (raw >> 28) & 0xf,
        pred: (raw >> 24) & 0xf,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        succ: (raw >> 20) & 0xf,
    })
}

/// Parse an instruction with the `Imm12Rd` format.
pub fn parse_imm12_rd(op: OpcodeImm12Rd, raw: u32) -> Format {
    Format::Imm12Rd(FormatImm12Rd {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12RdRmRs1` format.
pub fn parse_imm12_rd_rm_rs1(op: OpcodeImm12RdRmRs1, raw: u32) -> Format {
    Format::Imm12RdRmRs1(FormatImm12RdRmRs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12RdRs1` format.
pub fn parse_imm12_rd_rs1(op: OpcodeImm12RdRs1, raw: u32) -> Format {
    Format::Imm12RdRs1(FormatImm12RdRs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12Rs1` format.
pub fn parse_imm12_rs1(op: OpcodeImm12Rs1, raw: u32) -> Format {
    Format::Imm12Rs1(FormatImm12Rs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12Rs1StaggerMaskStaggerMax` format.
pub fn parse_imm12_rs1_stagger_mask_stagger_max(
    op: OpcodeImm12Rs1StaggerMaskStaggerMax,
    raw: u32,
) -> Format {
    Format::Imm12Rs1StaggerMaskStaggerMax(FormatImm12Rs1StaggerMaskStaggerMax {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rs1: (raw >> 15) & 0x1f,
        stagger_mask: (raw >> 8) & 0xf,
        stagger_max: (raw >> 12) & 0x7,
    })
}

/// Parse an instruction with the `Imm12hiImm12loRs1Rs2` format.
pub fn parse_imm12hi_imm12lo_rs1_rs2(op: OpcodeImm12hiImm12loRs1Rs2, raw: u32) -> Format {
    Format::Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2 {
        op,
        raw,
        imm12hi: (raw >> 25) & 0x7f,
        imm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Imm20Rd` format.
pub fn parse_imm20_rd(op: OpcodeImm20Rd, raw: u32) -> Format {
    Format::Imm20Rd(FormatImm20Rd {
        op,
        raw,
        imm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm5Rd` format.
pub fn parse_imm5_rd(op: OpcodeImm5Rd, raw: u32) -> Format {
    Format::Imm5Rd(FormatImm5Rd {
        op,
        raw,
        imm5: (raw >> 20) & 0x1f,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm5RdRs1` format.
pub fn parse_imm5_rd_rs1(op: OpcodeImm5RdRs1, raw: u32) -> Format {
    Format::Imm5RdRs1(FormatImm5RdRs1 {
        op,
        raw,
        imm5: (raw >> 20) & 0x1f,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Jimm20Rd` format.
pub fn parse_jimm20_rd(op: OpcodeJimm20Rd, raw: u32) -> Format {
    Format::Jimm20Rd(FormatJimm20Rd {
        op,
        raw,
        jimm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `NfRs1Rs2VdVm` format.
pub fn parse_nf_rs1_rs2_vd_vm(op: OpcodeNfRs1Rs2VdVm, raw: u32) -> Format {
    Format::NfRs1Rs2VdVm(FormatNfRs1Rs2VdVm {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
    })
}

/// Parse an instruction with the `NfRs1Rs2VmVs3` format.
pub fn parse_nf_rs1_rs2_vm_vs3(op: OpcodeNfRs1Rs2VmVs3, raw: u32) -> Format {
    Format::NfRs1Rs2VmVs3(FormatNfRs1Rs2VmVs3 {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs3: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `NfRs1VdVm` format.
pub fn parse_nf_rs1_vd_vm(op: OpcodeNfRs1VdVm, raw: u32) -> Format {
    Format::NfRs1VdVm(FormatNfRs1VdVm {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
    })
}

/// Parse an instruction with the `NfRs1VdVmVs2` format.
pub fn parse_nf_rs1_vd_vm_vs2(op: OpcodeNfRs1VdVmVs2, raw: u32) -> Format {
    Format::NfRs1VdVmVs2(FormatNfRs1VdVmVs2 {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `NfRs1VmVs2Vs3` format.
pub fn parse_nf_rs1_vm_vs2_vs3(op: OpcodeNfRs1VmVs2Vs3, raw: u32) -> Format {
    Format::NfRs1VmVs2Vs3(FormatNfRs1VmVs2Vs3 {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
        vs3: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `NfRs1VmVs3` format.
pub fn parse_nf_rs1_vm_vs3(op: OpcodeNfRs1VmVs3, raw: u32) -> Format {
    Format::NfRs1VmVs3(FormatNfRs1VmVs3 {
        op,
        raw,
        nf: (raw >> 29) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs3: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1` format.
pub fn parse_rd_rm_rs1(op: OpcodeRdRmRs1, raw: u32) -> Format {
    Format::RdRmRs1(FormatRdRmRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2` format.
pub fn parse_rd_rm_rs1_rs2(op: OpcodeRdRmRs1Rs2, raw: u32) -> Format {
    Format::RdRmRs1Rs2(FormatRdRmRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2Rs3` format.
pub fn parse_rd_rm_rs1_rs2_rs3(op: OpcodeRdRmRs1Rs2Rs3, raw: u32) -> Format {
    Format::RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1` format.
pub fn parse_rd_rs1(op: OpcodeRdRs1, raw: u32) -> Format {
    Format::RdRs1(FormatRdRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs2` format.
pub fn parse_rd_rs1_rs2(op: OpcodeRdRs1Rs2, raw: u32) -> Format {
    Format::RdRs1Rs2(FormatRdRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs2Rs3` format.
pub fn parse_rd_rs1_rs2_rs3(op: OpcodeRdRs1Rs2Rs3, raw: u32) -> Format {
    Format::RdRs1Rs2Rs3(FormatRdRs1Rs2Rs3 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs3Shamt` format.
pub fn parse_rd_rs1_rs3_shamt(op: OpcodeRdRs1Rs3Shamt, raw: u32) -> Format {
    Format::RdRs1Rs3Shamt(FormatRdRs1Rs3Shamt {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
        shamt: (raw >> 20) & 0x3f,
    })
}

/// Parse an instruction with the `RdRs1Shamt` format.
pub fn parse_rd_rs1_shamt(op: OpcodeRdRs1Shamt, raw: u32) -> Format {
    Format::RdRs1Shamt(FormatRdRs1Shamt {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamt: (raw >> 20) & 0x3f,
    })
}

/// Parse an instruction with the `RdRs1Shamtw` format.
pub fn parse_rd_rs1_shamtw(op: OpcodeRdRs1Shamtw, raw: u32) -> Format {
    Format::RdRs1Shamtw(FormatRdRs1Shamtw {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamtw: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Zimm11` format.
pub fn parse_rd_rs1_zimm11(op: OpcodeRdRs1Zimm11, raw: u32) -> Format {
    Format::RdRs1Zimm11(FormatRdRs1Zimm11 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        zimm11: (raw >> 20) & 0x7ff,
    })
}

/// Parse an instruction with the `RdRs2` format.
pub fn parse_rd_rs2(op: OpcodeRdRs2, raw: u32) -> Format {
    Format::RdRs2(FormatRdRs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdVmVs2` format.
pub fn parse_rd_vm_vs2(op: OpcodeRdVmVs2, raw: u32) -> Format {
    Format::RdVmVs2(FormatRdVmVs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdVs2` format.
pub fn parse_rd_vs2(op: OpcodeRdVs2, raw: u32) -> Format {
    Format::RdVs2(FormatRdVs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdZimmZimm10` format.
pub fn parse_rd_zimm_zimm10(op: OpcodeRdZimmZimm10, raw: u32) -> Format {
    Format::RdZimmZimm10(FormatRdZimmZimm10 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        zimm: (raw >> 15) & 0x1f,
        zimm10: (raw >> 20) & 0x3ff,
    })
}

/// Parse an instruction with the `Rs1` format.
pub fn parse_rs1(op: OpcodeRs1, raw: u32) -> Format {
    Format::Rs1(FormatRs1 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1Rs2` format.
pub fn parse_rs1_rs2(op: OpcodeRs1Rs2, raw: u32) -> Format {
    Format::Rs1Rs2(FormatRs1Rs2 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1Vd` format.
pub fn parse_rs1_vd(op: OpcodeRs1Vd, raw: u32) -> Format {
    Format::Rs1Vd(FormatRs1Vd {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1VdVmVs2` format.
pub fn parse_rs1_vd_vm_vs2(op: OpcodeRs1VdVmVs2, raw: u32) -> Format {
    Format::Rs1VdVmVs2(FormatRs1VdVmVs2 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1VdVmVs2Wd` format.
pub fn parse_rs1_vd_vm_vs2_wd(op: OpcodeRs1VdVmVs2Wd, raw: u32) -> Format {
    Format::Rs1VdVmVs2Wd(FormatRs1VdVmVs2Wd {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
        wd: (raw >> 26) & 0x1,
    })
}

/// Parse an instruction with the `Rs1VdVs2` format.
pub fn parse_rs1_vd_vs2(op: OpcodeRs1VdVs2, raw: u32) -> Format {
    Format::Rs1VdVs2(FormatRs1VdVs2 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1Vs3` format.
pub fn parse_rs1_vs3(op: OpcodeRs1Vs3, raw: u32) -> Format {
    Format::Rs1Vs3(FormatRs1Vs3 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        vs3: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Simm5Vd` format.
pub fn parse_simm5_vd(op: OpcodeSimm5Vd, raw: u32) -> Format {
    Format::Simm5Vd(FormatSimm5Vd {
        op,
        raw,
        simm5: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Simm5VdVmVs2` format.
pub fn parse_simm5_vd_vm_vs2(op: OpcodeSimm5VdVmVs2, raw: u32) -> Format {
    Format::Simm5VdVmVs2(FormatSimm5VdVmVs2 {
        op,
        raw,
        simm5: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Simm5VdVs2` format.
pub fn parse_simm5_vd_vs2(op: OpcodeSimm5VdVs2, raw: u32) -> Format {
    Format::Simm5VdVs2(FormatSimm5VdVs2 {
        op,
        raw,
        simm5: (raw >> 15) & 0x1f,
        vd: (raw >> 7) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `VdVm` format.
pub fn parse_vd_vm(op: OpcodeVdVm, raw: u32) -> Format {
    Format::VdVm(FormatVdVm {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
    })
}

/// Parse an instruction with the `VdVmVs1Vs2` format.
pub fn parse_vd_vm_vs1_vs2(op: OpcodeVdVmVs1Vs2, raw: u32) -> Format {
    Format::VdVmVs1Vs2(FormatVdVmVs1Vs2 {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs1: (raw >> 15) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `VdVmVs2` format.
pub fn parse_vd_vm_vs2(op: OpcodeVdVmVs2, raw: u32) -> Format {
    Format::VdVmVs2(FormatVdVmVs2 {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vm: (raw >> 25) & 0x1,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `VdVs1` format.
pub fn parse_vd_vs1(op: OpcodeVdVs1, raw: u32) -> Format {
    Format::VdVs1(FormatVdVs1 {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `VdVs1Vs2` format.
pub fn parse_vd_vs1_vs2(op: OpcodeVdVs1Vs2, raw: u32) -> Format {
    Format::VdVs1Vs2(FormatVdVs1Vs2 {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vs1: (raw >> 15) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `VdVs2` format.
pub fn parse_vd_vs2(op: OpcodeVdVs2, raw: u32) -> Format {
    Format::VdVs2(FormatVdVs2 {
        op,
        raw,
        vd: (raw >> 7) & 0x1f,
        vs2: (raw >> 20) & 0x1f,
    })
}

/// Decode instruction into string.
pub fn inst_to_string(raw: Format) -> String {
    match raw {
        Format::Unit(x) => x.op.to_string(),
        Format::AqrlRdRs1(x) => x.op.to_string(),
        Format::AqrlRdRs1Rs2(x) => x.op.to_string(),
        Format::Bimm12hiBimm12loRs1Rs2(x) => x.op.to_string(),
        Format::FmPredRdRs1Succ(x) => x.op.to_string(),
        Format::Imm12Rd(x) => x.op.to_string(),
        Format::Imm12RdRmRs1(x) => x.op.to_string(),
        Format::Imm12RdRs1(x) => x.op.to_string(),
        Format::Imm12Rs1(x) => x.op.to_string(),
        Format::Imm12Rs1StaggerMaskStaggerMax(x) => x.op.to_string(),
        Format::Imm12hiImm12loRs1Rs2(x) => x.op.to_string(),
        Format::Imm20Rd(x) => x.op.to_string(),
        Format::Imm5Rd(x) => x.op.to_string(),
        Format::Imm5RdRs1(x) => x.op.to_string(),
        Format::Jimm20Rd(x) => x.op.to_string(),
        Format::NfRs1Rs2VdVm(x) => x.op.to_string(),
        Format::NfRs1Rs2VmVs3(x) => x.op.to_string(),
        Format::NfRs1VdVm(x) => x.op.to_string(),
        Format::NfRs1VdVmVs2(x) => x.op.to_string(),
        Format::NfRs1VmVs2Vs3(x) => x.op.to_string(),
        Format::NfRs1VmVs3(x) => x.op.to_string(),
        Format::RdRmRs1(x) => x.op.to_string(),
        Format::RdRmRs1Rs2(x) => x.op.to_string(),
        Format::RdRmRs1Rs2Rs3(x) => x.op.to_string(),
        Format::RdRs1(x) => x.op.to_string(),
        Format::RdRs1Rs2(x) => x.op.to_string(),
        Format::RdRs1Rs2Rs3(x) => x.op.to_string(),
        Format::RdRs1Rs3Shamt(x) => x.op.to_string(),
        Format::RdRs1Shamt(x) => x.op.to_string(),
        Format::RdRs1Shamtw(x) => x.op.to_string(),
        Format::RdRs1Zimm11(x) => x.op.to_string(),
        Format::RdRs2(x) => x.op.to_string(),
        Format::RdVmVs2(x) => x.op.to_string(),
        Format::RdVs2(x) => x.op.to_string(),
        Format::RdZimmZimm10(x) => x.op.to_string(),
        Format::Rs1(x) => x.op.to_string(),
        Format::Rs1Rs2(x) => x.op.to_string(),
        Format::Rs1Vd(x) => x.op.to_string(),
        Format::Rs1VdVmVs2(x) => x.op.to_string(),
        Format::Rs1VdVmVs2Wd(x) => x.op.to_string(),
        Format::Rs1VdVs2(x) => x.op.to_string(),
        Format::Rs1Vs3(x) => x.op.to_string(),
        Format::Simm5Vd(x) => x.op.to_string(),
        Format::Simm5VdVmVs2(x) => x.op.to_string(),
        Format::Simm5VdVs2(x) => x.op.to_string(),
        Format::VdVm(x) => x.op.to_string(),
        Format::VdVmVs1Vs2(x) => x.op.to_string(),
        Format::VdVmVs2(x) => x.op.to_string(),
        Format::VdVs1(x) => x.op.to_string(),
        Format::VdVs1Vs2(x) => x.op.to_string(),
        Format::VdVs2(x) => x.op.to_string(),
        _ => "Unsupported instruction format".to_string(),
    }
}
/// Struct to store the latency of each instruction.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct Latency {
    // Format::Unit
    ecall: u8,
    ebreak: u8,
    uret: u8,
    sret: u8,
    mret: u8,
    dret: u8,
    wfi: u8,
    // Format::AqrlRdRs1
    lr_w: u8,
    lr_d: u8,
    // Format::AqrlRdRs1Rs2
    amoadd_w: u8,
    amoxor_w: u8,
    amoor_w: u8,
    amoand_w: u8,
    amomin_w: u8,
    amomax_w: u8,
    amominu_w: u8,
    amomaxu_w: u8,
    amoswap_w: u8,
    sc_w: u8,
    amoadd_d: u8,
    amoxor_d: u8,
    amoor_d: u8,
    amoand_d: u8,
    amomin_d: u8,
    amomax_d: u8,
    amominu_d: u8,
    amomaxu_d: u8,
    amoswap_d: u8,
    sc_d: u8,
    // Format::Bimm12hiBimm12loRs1Rs2
    beq: u8,
    bne: u8,
    blt: u8,
    bge: u8,
    bltu: u8,
    bgeu: u8,
    // Format::FmPredRdRs1Succ
    fence: u8,
    // Format::Imm12Rd
    scfgri: u8,
    // Format::Imm12RdRmRs1
    irep: u8,
    // Format::Imm12RdRs1
    jalr: u8,
    addi: u8,
    slti: u8,
    sltiu: u8,
    xori: u8,
    ori: u8,
    andi: u8,
    lb: u8,
    lh: u8,
    lw: u8,
    lbu: u8,
    lhu: u8,
    fence_i: u8,
    addiw: u8,
    ld: u8,
    lwu: u8,
    flw: u8,
    fld: u8,
    flq: u8,
    csrrw: u8,
    csrrs: u8,
    csrrc: u8,
    csrrwi: u8,
    csrrsi: u8,
    csrrci: u8,
    flh: u8,
    // Format::Imm12Rs1
    scfgwi: u8,
    // Format::Imm12Rs1StaggerMaskStaggerMax
    frep_o: u8,
    frep_i: u8,
    // Format::Imm12hiImm12loRs1Rs2
    sb: u8,
    sh: u8,
    sw: u8,
    sd: u8,
    fsw: u8,
    fsd: u8,
    fsq: u8,
    fsh: u8,
    // Format::Imm20Rd
    lui: u8,
    auipc: u8,
    // Format::Imm5Rd
    dmstati: u8,
    // Format::Imm5RdRs1
    dmcpyi: u8,
    // Format::Jimm20Rd
    jal: u8,
    // Format::NfRs1Rs2VdVm
    vlse8_v: u8,
    vlse16_v: u8,
    vlse32_v: u8,
    vlse64_v: u8,
    vlse128_v: u8,
    vlse256_v: u8,
    vlse512_v: u8,
    vlse1024_v: u8,
    // Format::NfRs1Rs2VmVs3
    vsse8_v: u8,
    vsse16_v: u8,
    vsse32_v: u8,
    vsse64_v: u8,
    vsse128_v: u8,
    vsse256_v: u8,
    vsse512_v: u8,
    vsse1024_v: u8,
    // Format::NfRs1VdVm
    vle8_v: u8,
    vle16_v: u8,
    vle32_v: u8,
    vle64_v: u8,
    vle128_v: u8,
    vle256_v: u8,
    vle512_v: u8,
    vle1024_v: u8,
    vle8ff_v: u8,
    vle16ff_v: u8,
    vle32ff_v: u8,
    vle64ff_v: u8,
    vle128ff_v: u8,
    vle256ff_v: u8,
    vle512ff_v: u8,
    vle1024ff_v: u8,
    // Format::NfRs1VdVmVs2
    vluxei8_v: u8,
    vluxei16_v: u8,
    vluxei32_v: u8,
    vluxei64_v: u8,
    vluxei128_v: u8,
    vluxei256_v: u8,
    vluxei512_v: u8,
    vluxei1024_v: u8,
    vloxei8_v: u8,
    vloxei16_v: u8,
    vloxei32_v: u8,
    vloxei64_v: u8,
    vloxei128_v: u8,
    vloxei256_v: u8,
    vloxei512_v: u8,
    vloxei1024_v: u8,
    // Format::NfRs1VmVs2Vs3
    vsuxei8_v: u8,
    vsuxei16_v: u8,
    vsuxei32_v: u8,
    vsuxei64_v: u8,
    vsuxei128_v: u8,
    vsuxei256_v: u8,
    vsuxei512_v: u8,
    vsuxei1024_v: u8,
    vsoxei8_v: u8,
    vsoxei16_v: u8,
    vsoxei32_v: u8,
    vsoxei64_v: u8,
    vsoxei128_v: u8,
    vsoxei256_v: u8,
    vsoxei512_v: u8,
    vsoxei1024_v: u8,
    // Format::NfRs1VmVs3
    vse8_v: u8,
    vse16_v: u8,
    vse32_v: u8,
    vse64_v: u8,
    vse128_v: u8,
    vse256_v: u8,
    vse512_v: u8,
    vse1024_v: u8,
    // Format::RdRmRs1
    fsqrt_s: u8,
    fcvt_w_s: u8,
    fcvt_wu_s: u8,
    fcvt_s_w: u8,
    fcvt_s_wu: u8,
    fcvt_l_s: u8,
    fcvt_lu_s: u8,
    fcvt_s_l: u8,
    fcvt_s_lu: u8,
    fcvt_s_d: u8,
    fcvt_d_s: u8,
    fsqrt_d: u8,
    fcvt_w_d: u8,
    fcvt_wu_d: u8,
    fcvt_d_w: u8,
    fcvt_d_wu: u8,
    fcvt_l_d: u8,
    fcvt_lu_d: u8,
    fcvt_d_l: u8,
    fcvt_d_lu: u8,
    fcvt_s_q: u8,
    fcvt_q_s: u8,
    fcvt_d_q: u8,
    fcvt_q_d: u8,
    fsqrt_q: u8,
    fcvt_w_q: u8,
    fcvt_wu_q: u8,
    fcvt_q_w: u8,
    fcvt_q_wu: u8,
    fcvt_l_q: u8,
    fcvt_lu_q: u8,
    fcvt_q_l: u8,
    fcvt_q_lu: u8,
    fsqrt_h: u8,
    fcvt_w_h: u8,
    fcvt_wu_h: u8,
    fcvt_h_w: u8,
    fcvt_h_wu: u8,
    fcvt_l_h: u8,
    fcvt_lu_h: u8,
    fcvt_h_l: u8,
    fcvt_h_lu: u8,
    fcvt_h_s: u8,
    fcvt_h_d: u8,
    fcvt_h_h: u8,
    fcvt_b_h: u8,
    // Format::RdRmRs1Rs2
    fadd_s: u8,
    fsub_s: u8,
    fmul_s: u8,
    fdiv_s: u8,
    fadd_d: u8,
    fsub_d: u8,
    fmul_d: u8,
    fdiv_d: u8,
    fadd_q: u8,
    fsub_q: u8,
    fmul_q: u8,
    fdiv_q: u8,
    fadd_h: u8,
    fsub_h: u8,
    fmul_h: u8,
    fdiv_h: u8,
    // Format::RdRmRs1Rs2Rs3
    fmadd_s: u8,
    fmsub_s: u8,
    fnmsub_s: u8,
    fnmadd_s: u8,
    fmadd_d: u8,
    fmsub_d: u8,
    fnmsub_d: u8,
    fnmadd_d: u8,
    fmadd_q: u8,
    fmsub_q: u8,
    fnmsub_q: u8,
    fnmadd_q: u8,
    fmadd_h: u8,
    fmsub_h: u8,
    fnmsub_h: u8,
    fnmadd_h: u8,
    // Format::RdRs1
    hlv_b: u8,
    hlv_bu: u8,
    hlv_h: u8,
    hlv_hu: u8,
    hlvx_hu: u8,
    hlv_w: u8,
    hlvx_wu: u8,
    hlv_wu: u8,
    hlv_d: u8,
    fmv_x_w: u8,
    fclass_s: u8,
    fmv_w_x: u8,
    fclass_d: u8,
    fmv_x_d: u8,
    fmv_d_x: u8,
    fclass_q: u8,
    clz: u8,
    ctz: u8,
    pcnt: u8,
    sext_b: u8,
    sext_h: u8,
    crc32_b: u8,
    crc32_h: u8,
    crc32_w: u8,
    crc32c_b: u8,
    crc32c_h: u8,
    crc32c_w: u8,
    fmv_x_h: u8,
    fclass_h: u8,
    fmv_h_x: u8,
    fcvt_s_h: u8,
    fcvt_d_h: u8,
    fcvt_h_b: u8,
    fcvt_b_b: u8,
    // Format::RdRs1Rs2
    add: u8,
    sub: u8,
    sll: u8,
    slt: u8,
    sltu: u8,
    xor: u8,
    srl: u8,
    sra: u8,
    or: u8,
    and: u8,
    addw: u8,
    subw: u8,
    sllw: u8,
    srlw: u8,
    sraw: u8,
    mul: u8,
    mulh: u8,
    mulhsu: u8,
    mulhu: u8,
    div: u8,
    divu: u8,
    rem: u8,
    remu: u8,
    mulw: u8,
    divw: u8,
    divuw: u8,
    remw: u8,
    remuw: u8,
    fsgnj_s: u8,
    fsgnjn_s: u8,
    fsgnjx_s: u8,
    fmin_s: u8,
    fmax_s: u8,
    fle_s: u8,
    flt_s: u8,
    feq_s: u8,
    fsgnj_d: u8,
    fsgnjn_d: u8,
    fsgnjx_d: u8,
    fmin_d: u8,
    fmax_d: u8,
    fle_d: u8,
    flt_d: u8,
    feq_d: u8,
    fsgnj_q: u8,
    fsgnjn_q: u8,
    fsgnjx_q: u8,
    fmin_q: u8,
    fmax_q: u8,
    fle_q: u8,
    flt_q: u8,
    feq_q: u8,
    andn: u8,
    orn: u8,
    xnor: u8,
    slo: u8,
    sro: u8,
    rol: u8,
    ror: u8,
    sbclr: u8,
    sbset: u8,
    sbinv: u8,
    sbext: u8,
    gorc: u8,
    grev: u8,
    sh1add: u8,
    sh2add: u8,
    sh3add: u8,
    clmul: u8,
    clmulr: u8,
    clmulh: u8,
    min: u8,
    max: u8,
    minu: u8,
    maxu: u8,
    shfl: u8,
    unshfl: u8,
    bext: u8,
    bdep: u8,
    pack: u8,
    packu: u8,
    packh: u8,
    bfp: u8,
    dmcpy: u8,
    fsgnj_h: u8,
    fsgnjn_h: u8,
    fsgnjx_h: u8,
    fmin_h: u8,
    fmax_h: u8,
    feq_h: u8,
    flt_h: u8,
    fle_h: u8,
    vsetvl: u8,
    // Format::RdRs1Rs2Rs3
    cmix: u8,
    cmov: u8,
    fsl: u8,
    fsr: u8,
    // Format::RdRs1Rs3Shamt
    fsri: u8,
    // Format::RdRs1Shamt
    slli: u8,
    srli: u8,
    srai: u8,
    sloi: u8,
    sroi: u8,
    rori: u8,
    sbclri: u8,
    sbseti: u8,
    sbinvi: u8,
    sbexti: u8,
    gorci: u8,
    grevi: u8,
    // Format::RdRs1Shamtw
    slliw: u8,
    srliw: u8,
    sraiw: u8,
    shfli: u8,
    unshfli: u8,
    // Format::RdRs1Zimm11
    vsetvli: u8,
    // Format::RdRs2
    dmstat: u8,
    scfgr: u8,
    // Format::RdVmVs2
    vcpop_m: u8,
    vfirst_m: u8,
    // Format::RdVs2
    vfmv_f_s: u8,
    vmv_x_s: u8,
    // Format::RdZimmZimm10
    vsetivli: u8,
    // Format::Rs1
    dmrep: u8,
    // Format::Rs1Rs2
    hfence_vvma: u8,
    hfence_gvma: u8,
    hsv_b: u8,
    hsv_h: u8,
    hsv_w: u8,
    hsv_d: u8,
    sfence_vma: u8,
    dmsrc: u8,
    dmdst: u8,
    dmstr: u8,
    scfgw: u8,
    // Format::Rs1Vd
    vlm_v: u8,
    vl1re8_v: u8,
    vl1re16_v: u8,
    vl1re32_v: u8,
    vl1re64_v: u8,
    vl2re8_v: u8,
    vl2re16_v: u8,
    vl2re32_v: u8,
    vl2re64_v: u8,
    vl4re8_v: u8,
    vl4re16_v: u8,
    vl4re32_v: u8,
    vl4re64_v: u8,
    vl8re8_v: u8,
    vl8re16_v: u8,
    vl8re32_v: u8,
    vl8re64_v: u8,
    vfmv_s_f: u8,
    vfmv_v_f: u8,
    vmv_v_x: u8,
    vmv_s_x: u8,
    // Format::Rs1VdVmVs2
    vfadd_vf: u8,
    vfsub_vf: u8,
    vfmin_vf: u8,
    vfmax_vf: u8,
    vfsgnj_vf: u8,
    vfsgnjn_vf: u8,
    vfsgnjx_vf: u8,
    vfslide1up_vf: u8,
    vfslide1down_vf: u8,
    vmfeq_vf: u8,
    vmfle_vf: u8,
    vmflt_vf: u8,
    vmfne_vf: u8,
    vmfgt_vf: u8,
    vmfge_vf: u8,
    vfdiv_vf: u8,
    vfrdiv_vf: u8,
    vfmul_vf: u8,
    vfrsub_vf: u8,
    vfmadd_vf: u8,
    vfnmadd_vf: u8,
    vfmsub_vf: u8,
    vfnmsub_vf: u8,
    vfmacc_vf: u8,
    vfnmacc_vf: u8,
    vfmsac_vf: u8,
    vfnmsac_vf: u8,
    vfwadd_vf: u8,
    vfwsub_vf: u8,
    vfwadd_wf: u8,
    vfwsub_wf: u8,
    vfwmul_vf: u8,
    vfwdotp_vf: u8,
    vfwmacc_vf: u8,
    vfwnmacc_vf: u8,
    vfwmsac_vf: u8,
    vfwnmsac_vf: u8,
    vadd_vx: u8,
    vsub_vx: u8,
    vrsub_vx: u8,
    vminu_vx: u8,
    vmin_vx: u8,
    vmaxu_vx: u8,
    vmax_vx: u8,
    vand_vx: u8,
    vor_vx: u8,
    vxor_vx: u8,
    vrgather_vx: u8,
    vslideup_vx: u8,
    vslidedown_vx: u8,
    vmseq_vx: u8,
    vmsne_vx: u8,
    vmsltu_vx: u8,
    vmslt_vx: u8,
    vmsleu_vx: u8,
    vmsle_vx: u8,
    vmsgtu_vx: u8,
    vmsgt_vx: u8,
    vsaddu_vx: u8,
    vsadd_vx: u8,
    vssubu_vx: u8,
    vssub_vx: u8,
    vsll_vx: u8,
    vsmul_vx: u8,
    vsrl_vx: u8,
    vsra_vx: u8,
    vssrl_vx: u8,
    vssra_vx: u8,
    vnsrl_wx: u8,
    vnsra_wx: u8,
    vnclipu_wx: u8,
    vnclip_wx: u8,
    vaaddu_vx: u8,
    vaadd_vx: u8,
    vasubu_vx: u8,
    vasub_vx: u8,
    vslide1up_vx: u8,
    vslide1down_vx: u8,
    vdivu_vx: u8,
    vdiv_vx: u8,
    vremu_vx: u8,
    vrem_vx: u8,
    vmulhu_vx: u8,
    vmul_vx: u8,
    vmulhsu_vx: u8,
    vmulh_vx: u8,
    vmadd_vx: u8,
    vnmsub_vx: u8,
    vmacc_vx: u8,
    vnmsac_vx: u8,
    vwaddu_vx: u8,
    vwadd_vx: u8,
    vwsubu_vx: u8,
    vwsub_vx: u8,
    vwaddu_wx: u8,
    vwadd_wx: u8,
    vwsubu_wx: u8,
    vwsub_wx: u8,
    vwmulu_vx: u8,
    vwmulsu_vx: u8,
    vwmul_vx: u8,
    vwmaccu_vx: u8,
    vwmacc_vx: u8,
    vwmaccus_vx: u8,
    vwmaccsu_vx: u8,
    // Format::Rs1VdVmVs2Wd
    vamoswapei8_v: u8,
    vamoaddei8_v: u8,
    vamoxorei8_v: u8,
    vamoandei8_v: u8,
    vamoorei8_v: u8,
    vamominei8_v: u8,
    vamomaxei8_v: u8,
    vamominuei8_v: u8,
    vamomaxuei8_v: u8,
    vamoswapei16_v: u8,
    vamoaddei16_v: u8,
    vamoxorei16_v: u8,
    vamoandei16_v: u8,
    vamoorei16_v: u8,
    vamominei16_v: u8,
    vamomaxei16_v: u8,
    vamominuei16_v: u8,
    vamomaxuei16_v: u8,
    vamoswapei32_v: u8,
    vamoaddei32_v: u8,
    vamoxorei32_v: u8,
    vamoandei32_v: u8,
    vamoorei32_v: u8,
    vamominei32_v: u8,
    vamomaxei32_v: u8,
    vamominuei32_v: u8,
    vamomaxuei32_v: u8,
    vamoswapei64_v: u8,
    vamoaddei64_v: u8,
    vamoxorei64_v: u8,
    vamoandei64_v: u8,
    vamoorei64_v: u8,
    vamominei64_v: u8,
    vamomaxei64_v: u8,
    vamominuei64_v: u8,
    vamomaxuei64_v: u8,
    // Format::Rs1VdVs2
    vfmerge_vfm: u8,
    vadc_vxm: u8,
    vmadc_vxm: u8,
    vmadc_vx: u8,
    vsbc_vxm: u8,
    vmsbc_vxm: u8,
    vmsbc_vx: u8,
    vmerge_vxm: u8,
    // Format::Rs1Vs3
    vsm_v: u8,
    vs1r_v: u8,
    vs2r_v: u8,
    vs4r_v: u8,
    vs8r_v: u8,
    // Format::Simm5Vd
    vmv_v_i: u8,
    // Format::Simm5VdVmVs2
    vadd_vi: u8,
    vrsub_vi: u8,
    vand_vi: u8,
    vor_vi: u8,
    vxor_vi: u8,
    vrgather_vi: u8,
    vslideup_vi: u8,
    vslidedown_vi: u8,
    vmseq_vi: u8,
    vmsne_vi: u8,
    vmsleu_vi: u8,
    vmsle_vi: u8,
    vmsgtu_vi: u8,
    vmsgt_vi: u8,
    vsaddu_vi: u8,
    vsadd_vi: u8,
    vsll_vi: u8,
    vsrl_vi: u8,
    vsra_vi: u8,
    vssrl_vi: u8,
    vssra_vi: u8,
    vnsrl_wi: u8,
    vnsra_wi: u8,
    vnclipu_wi: u8,
    vnclip_wi: u8,
    // Format::Simm5VdVs2
    vadc_vim: u8,
    vmadc_vim: u8,
    vmadc_vi: u8,
    vmerge_vim: u8,
    // Format::VdVm
    vid_v: u8,
    // Format::VdVmVs1Vs2
    vfadd_vv: u8,
    vfredusum_vs: u8,
    vfsub_vv: u8,
    vfredosum_vs: u8,
    vfmin_vv: u8,
    vfredmin_vs: u8,
    vfmax_vv: u8,
    vfredmax_vs: u8,
    vfsgnj_vv: u8,
    vfsgnjn_vv: u8,
    vfsgnjx_vv: u8,
    vmfeq_vv: u8,
    vmfle_vv: u8,
    vmflt_vv: u8,
    vmfne_vv: u8,
    vfdiv_vv: u8,
    vfmul_vv: u8,
    vfmadd_vv: u8,
    vfnmadd_vv: u8,
    vfmsub_vv: u8,
    vfnmsub_vv: u8,
    vfmacc_vv: u8,
    vfnmacc_vv: u8,
    vfmsac_vv: u8,
    vfnmsac_vv: u8,
    vfwadd_vv: u8,
    vfwredusum_vs: u8,
    vfwsub_vv: u8,
    vfwredosum_vs: u8,
    vfwadd_wv: u8,
    vfwsub_wv: u8,
    vfwmul_vv: u8,
    vfwdotp_vv: u8,
    vfwmacc_vv: u8,
    vfwnmacc_vv: u8,
    vfwmsac_vv: u8,
    vfwnmsac_vv: u8,
    vadd_vv: u8,
    vsub_vv: u8,
    vminu_vv: u8,
    vmin_vv: u8,
    vmaxu_vv: u8,
    vmax_vv: u8,
    vand_vv: u8,
    vor_vv: u8,
    vxor_vv: u8,
    vrgather_vv: u8,
    vrgatherei16_vv: u8,
    vmseq_vv: u8,
    vmsne_vv: u8,
    vmsltu_vv: u8,
    vmslt_vv: u8,
    vmsleu_vv: u8,
    vmsle_vv: u8,
    vsaddu_vv: u8,
    vsadd_vv: u8,
    vssubu_vv: u8,
    vssub_vv: u8,
    vsll_vv: u8,
    vsmul_vv: u8,
    vsrl_vv: u8,
    vsra_vv: u8,
    vssrl_vv: u8,
    vssra_vv: u8,
    vnsrl_wv: u8,
    vnsra_wv: u8,
    vnclipu_wv: u8,
    vnclip_wv: u8,
    vwredsumu_vs: u8,
    vwredsum_vs: u8,
    vredsum_vs: u8,
    vredand_vs: u8,
    vredor_vs: u8,
    vredxor_vs: u8,
    vredminu_vs: u8,
    vredmin_vs: u8,
    vredmaxu_vs: u8,
    vredmax_vs: u8,
    vaaddu_vv: u8,
    vaadd_vv: u8,
    vasubu_vv: u8,
    vasub_vv: u8,
    vmandn_mm: u8,
    vmand_mm: u8,
    vmor_mm: u8,
    vmxor_mm: u8,
    vmorn_mm: u8,
    vmnand_mm: u8,
    vmnor_mm: u8,
    vmxnor_mm: u8,
    vdivu_vv: u8,
    vdiv_vv: u8,
    vremu_vv: u8,
    vrem_vv: u8,
    vmulhu_vv: u8,
    vmul_vv: u8,
    vmulhsu_vv: u8,
    vmulh_vv: u8,
    vmadd_vv: u8,
    vnmsub_vv: u8,
    vmacc_vv: u8,
    vnmsac_vv: u8,
    vwaddu_vv: u8,
    vwadd_vv: u8,
    vwsubu_vv: u8,
    vwsub_vv: u8,
    vwaddu_wv: u8,
    vwadd_wv: u8,
    vwsubu_wv: u8,
    vwsub_wv: u8,
    vwmulu_vv: u8,
    vwmulsu_vv: u8,
    vwmul_vv: u8,
    vwmaccu_vv: u8,
    vwmacc_vv: u8,
    vwmaccsu_vv: u8,
    // Format::VdVmVs2
    vfcvt_xu_f_v: u8,
    vfcvt_x_f_v: u8,
    vfcvt_f_xu_v: u8,
    vfcvt_f_x_v: u8,
    vfcvt_rtz_xu_f_v: u8,
    vfcvt_rtz_x_f_v: u8,
    vfwcvt_xu_f_v: u8,
    vfwcvt_x_f_v: u8,
    vfwcvt_f_xu_v: u8,
    vfwcvt_f_x_v: u8,
    vfwcvt_f_f_v: u8,
    vfwcvt_rtz_xu_f_v: u8,
    vfwcvt_rtz_x_f_v: u8,
    vfncvt_xu_f_w: u8,
    vfncvt_x_f_w: u8,
    vfncvt_f_xu_w: u8,
    vfncvt_f_x_w: u8,
    vfncvt_f_f_w: u8,
    vfncvt_rod_f_f_w: u8,
    vfncvt_rtz_xu_f_w: u8,
    vfncvt_rtz_x_f_w: u8,
    vfsqrt_v: u8,
    vfrsqrt7_v: u8,
    vfrec7_v: u8,
    vfclass_v: u8,
    vzext_vf8: u8,
    vsext_vf8: u8,
    vzext_vf4: u8,
    vsext_vf4: u8,
    vzext_vf2: u8,
    vsext_vf2: u8,
    vmsbf_m: u8,
    vmsof_m: u8,
    vmsif_m: u8,
    viota_m: u8,
    // Format::VdVs1
    vmv_v_v: u8,
    // Format::VdVs1Vs2
    vadc_vvm: u8,
    vmadc_vvm: u8,
    vmadc_vv: u8,
    vsbc_vvm: u8,
    vmsbc_vvm: u8,
    vmsbc_vv: u8,
    vmerge_vvm: u8,
    vcompress_vm: u8,
    // Format::VdVs2
    vmv1r_v: u8,
    vmv2r_v: u8,
    vmv4r_v: u8,
    vmv8r_v: u8,
}

/// Struct to store the latency of each instruction.
impl Default for Latency {
    fn default() -> Latency {
        Latency {
            ecall: 1,
            ebreak: 1,
            uret: 1,
            sret: 1,
            mret: 1,
            dret: 1,
            wfi: 1,
            lr_w: 1,
            lr_d: 1,
            amoadd_w: 1,
            amoxor_w: 1,
            amoor_w: 1,
            amoand_w: 1,
            amomin_w: 1,
            amomax_w: 1,
            amominu_w: 1,
            amomaxu_w: 1,
            amoswap_w: 1,
            sc_w: 1,
            amoadd_d: 1,
            amoxor_d: 1,
            amoor_d: 1,
            amoand_d: 1,
            amomin_d: 1,
            amomax_d: 1,
            amominu_d: 1,
            amomaxu_d: 1,
            amoswap_d: 1,
            sc_d: 1,
            beq: 1,
            bne: 1,
            blt: 1,
            bge: 1,
            bltu: 1,
            bgeu: 1,
            fence: 1,
            scfgri: 1,
            irep: 1,
            jalr: 1,
            addi: 1,
            slti: 1,
            sltiu: 1,
            xori: 1,
            ori: 1,
            andi: 1,
            lb: 1,
            lh: 1,
            lw: 1,
            lbu: 1,
            lhu: 1,
            fence_i: 1,
            addiw: 1,
            ld: 1,
            lwu: 1,
            flw: 1,
            fld: 1,
            flq: 1,
            csrrw: 1,
            csrrs: 1,
            csrrc: 1,
            csrrwi: 1,
            csrrsi: 1,
            csrrci: 1,
            flh: 1,
            scfgwi: 1,
            frep_o: 1,
            frep_i: 1,
            sb: 1,
            sh: 1,
            sw: 1,
            sd: 1,
            fsw: 1,
            fsd: 1,
            fsq: 1,
            fsh: 1,
            lui: 1,
            auipc: 1,
            dmstati: 1,
            dmcpyi: 1,
            jal: 1,
            vlse8_v: 1,
            vlse16_v: 1,
            vlse32_v: 1,
            vlse64_v: 1,
            vlse128_v: 1,
            vlse256_v: 1,
            vlse512_v: 1,
            vlse1024_v: 1,
            vsse8_v: 1,
            vsse16_v: 1,
            vsse32_v: 1,
            vsse64_v: 1,
            vsse128_v: 1,
            vsse256_v: 1,
            vsse512_v: 1,
            vsse1024_v: 1,
            vle8_v: 1,
            vle16_v: 1,
            vle32_v: 1,
            vle64_v: 1,
            vle128_v: 1,
            vle256_v: 1,
            vle512_v: 1,
            vle1024_v: 1,
            vle8ff_v: 1,
            vle16ff_v: 1,
            vle32ff_v: 1,
            vle64ff_v: 1,
            vle128ff_v: 1,
            vle256ff_v: 1,
            vle512ff_v: 1,
            vle1024ff_v: 1,
            vluxei8_v: 1,
            vluxei16_v: 1,
            vluxei32_v: 1,
            vluxei64_v: 1,
            vluxei128_v: 1,
            vluxei256_v: 1,
            vluxei512_v: 1,
            vluxei1024_v: 1,
            vloxei8_v: 1,
            vloxei16_v: 1,
            vloxei32_v: 1,
            vloxei64_v: 1,
            vloxei128_v: 1,
            vloxei256_v: 1,
            vloxei512_v: 1,
            vloxei1024_v: 1,
            vsuxei8_v: 1,
            vsuxei16_v: 1,
            vsuxei32_v: 1,
            vsuxei64_v: 1,
            vsuxei128_v: 1,
            vsuxei256_v: 1,
            vsuxei512_v: 1,
            vsuxei1024_v: 1,
            vsoxei8_v: 1,
            vsoxei16_v: 1,
            vsoxei32_v: 1,
            vsoxei64_v: 1,
            vsoxei128_v: 1,
            vsoxei256_v: 1,
            vsoxei512_v: 1,
            vsoxei1024_v: 1,
            vse8_v: 1,
            vse16_v: 1,
            vse32_v: 1,
            vse64_v: 1,
            vse128_v: 1,
            vse256_v: 1,
            vse512_v: 1,
            vse1024_v: 1,
            fsqrt_s: 1,
            fcvt_w_s: 1,
            fcvt_wu_s: 1,
            fcvt_s_w: 1,
            fcvt_s_wu: 1,
            fcvt_l_s: 1,
            fcvt_lu_s: 1,
            fcvt_s_l: 1,
            fcvt_s_lu: 1,
            fcvt_s_d: 1,
            fcvt_d_s: 1,
            fsqrt_d: 1,
            fcvt_w_d: 1,
            fcvt_wu_d: 1,
            fcvt_d_w: 1,
            fcvt_d_wu: 1,
            fcvt_l_d: 1,
            fcvt_lu_d: 1,
            fcvt_d_l: 1,
            fcvt_d_lu: 1,
            fcvt_s_q: 1,
            fcvt_q_s: 1,
            fcvt_d_q: 1,
            fcvt_q_d: 1,
            fsqrt_q: 1,
            fcvt_w_q: 1,
            fcvt_wu_q: 1,
            fcvt_q_w: 1,
            fcvt_q_wu: 1,
            fcvt_l_q: 1,
            fcvt_lu_q: 1,
            fcvt_q_l: 1,
            fcvt_q_lu: 1,
            fsqrt_h: 1,
            fcvt_w_h: 1,
            fcvt_wu_h: 1,
            fcvt_h_w: 1,
            fcvt_h_wu: 1,
            fcvt_l_h: 1,
            fcvt_lu_h: 1,
            fcvt_h_l: 1,
            fcvt_h_lu: 1,
            fcvt_h_s: 1,
            fcvt_h_d: 1,
            fcvt_h_h: 1,
            fcvt_b_h: 1,
            fadd_s: 1,
            fsub_s: 1,
            fmul_s: 1,
            fdiv_s: 1,
            fadd_d: 1,
            fsub_d: 1,
            fmul_d: 1,
            fdiv_d: 1,
            fadd_q: 1,
            fsub_q: 1,
            fmul_q: 1,
            fdiv_q: 1,
            fadd_h: 1,
            fsub_h: 1,
            fmul_h: 1,
            fdiv_h: 1,
            fmadd_s: 1,
            fmsub_s: 1,
            fnmsub_s: 1,
            fnmadd_s: 1,
            fmadd_d: 1,
            fmsub_d: 1,
            fnmsub_d: 1,
            fnmadd_d: 1,
            fmadd_q: 1,
            fmsub_q: 1,
            fnmsub_q: 1,
            fnmadd_q: 1,
            fmadd_h: 1,
            fmsub_h: 1,
            fnmsub_h: 1,
            fnmadd_h: 1,
            hlv_b: 1,
            hlv_bu: 1,
            hlv_h: 1,
            hlv_hu: 1,
            hlvx_hu: 1,
            hlv_w: 1,
            hlvx_wu: 1,
            hlv_wu: 1,
            hlv_d: 1,
            fmv_x_w: 1,
            fclass_s: 1,
            fmv_w_x: 1,
            fclass_d: 1,
            fmv_x_d: 1,
            fmv_d_x: 1,
            fclass_q: 1,
            clz: 1,
            ctz: 1,
            pcnt: 1,
            sext_b: 1,
            sext_h: 1,
            crc32_b: 1,
            crc32_h: 1,
            crc32_w: 1,
            crc32c_b: 1,
            crc32c_h: 1,
            crc32c_w: 1,
            fmv_x_h: 1,
            fclass_h: 1,
            fmv_h_x: 1,
            fcvt_s_h: 1,
            fcvt_d_h: 1,
            fcvt_h_b: 1,
            fcvt_b_b: 1,
            add: 1,
            sub: 1,
            sll: 1,
            slt: 1,
            sltu: 1,
            xor: 1,
            srl: 1,
            sra: 1,
            or: 1,
            and: 1,
            addw: 1,
            subw: 1,
            sllw: 1,
            srlw: 1,
            sraw: 1,
            mul: 1,
            mulh: 1,
            mulhsu: 1,
            mulhu: 1,
            div: 1,
            divu: 1,
            rem: 1,
            remu: 1,
            mulw: 1,
            divw: 1,
            divuw: 1,
            remw: 1,
            remuw: 1,
            fsgnj_s: 1,
            fsgnjn_s: 1,
            fsgnjx_s: 1,
            fmin_s: 1,
            fmax_s: 1,
            fle_s: 1,
            flt_s: 1,
            feq_s: 1,
            fsgnj_d: 1,
            fsgnjn_d: 1,
            fsgnjx_d: 1,
            fmin_d: 1,
            fmax_d: 1,
            fle_d: 1,
            flt_d: 1,
            feq_d: 1,
            fsgnj_q: 1,
            fsgnjn_q: 1,
            fsgnjx_q: 1,
            fmin_q: 1,
            fmax_q: 1,
            fle_q: 1,
            flt_q: 1,
            feq_q: 1,
            andn: 1,
            orn: 1,
            xnor: 1,
            slo: 1,
            sro: 1,
            rol: 1,
            ror: 1,
            sbclr: 1,
            sbset: 1,
            sbinv: 1,
            sbext: 1,
            gorc: 1,
            grev: 1,
            sh1add: 1,
            sh2add: 1,
            sh3add: 1,
            clmul: 1,
            clmulr: 1,
            clmulh: 1,
            min: 1,
            max: 1,
            minu: 1,
            maxu: 1,
            shfl: 1,
            unshfl: 1,
            bext: 1,
            bdep: 1,
            pack: 1,
            packu: 1,
            packh: 1,
            bfp: 1,
            dmcpy: 1,
            fsgnj_h: 1,
            fsgnjn_h: 1,
            fsgnjx_h: 1,
            fmin_h: 1,
            fmax_h: 1,
            feq_h: 1,
            flt_h: 1,
            fle_h: 1,
            vsetvl: 1,
            cmix: 1,
            cmov: 1,
            fsl: 1,
            fsr: 1,
            fsri: 1,
            slli: 1,
            srli: 1,
            srai: 1,
            sloi: 1,
            sroi: 1,
            rori: 1,
            sbclri: 1,
            sbseti: 1,
            sbinvi: 1,
            sbexti: 1,
            gorci: 1,
            grevi: 1,
            slliw: 1,
            srliw: 1,
            sraiw: 1,
            shfli: 1,
            unshfli: 1,
            vsetvli: 1,
            dmstat: 1,
            scfgr: 1,
            vcpop_m: 1,
            vfirst_m: 1,
            vfmv_f_s: 1,
            vmv_x_s: 1,
            vsetivli: 1,
            dmrep: 1,
            hfence_vvma: 1,
            hfence_gvma: 1,
            hsv_b: 1,
            hsv_h: 1,
            hsv_w: 1,
            hsv_d: 1,
            sfence_vma: 1,
            dmsrc: 1,
            dmdst: 1,
            dmstr: 1,
            scfgw: 1,
            vlm_v: 1,
            vl1re8_v: 1,
            vl1re16_v: 1,
            vl1re32_v: 1,
            vl1re64_v: 1,
            vl2re8_v: 1,
            vl2re16_v: 1,
            vl2re32_v: 1,
            vl2re64_v: 1,
            vl4re8_v: 1,
            vl4re16_v: 1,
            vl4re32_v: 1,
            vl4re64_v: 1,
            vl8re8_v: 1,
            vl8re16_v: 1,
            vl8re32_v: 1,
            vl8re64_v: 1,
            vfmv_s_f: 1,
            vfmv_v_f: 1,
            vmv_v_x: 1,
            vmv_s_x: 1,
            vfadd_vf: 1,
            vfsub_vf: 1,
            vfmin_vf: 1,
            vfmax_vf: 1,
            vfsgnj_vf: 1,
            vfsgnjn_vf: 1,
            vfsgnjx_vf: 1,
            vfslide1up_vf: 1,
            vfslide1down_vf: 1,
            vmfeq_vf: 1,
            vmfle_vf: 1,
            vmflt_vf: 1,
            vmfne_vf: 1,
            vmfgt_vf: 1,
            vmfge_vf: 1,
            vfdiv_vf: 1,
            vfrdiv_vf: 1,
            vfmul_vf: 1,
            vfrsub_vf: 1,
            vfmadd_vf: 1,
            vfnmadd_vf: 1,
            vfmsub_vf: 1,
            vfnmsub_vf: 1,
            vfmacc_vf: 1,
            vfnmacc_vf: 1,
            vfmsac_vf: 1,
            vfnmsac_vf: 1,
            vfwadd_vf: 1,
            vfwsub_vf: 1,
            vfwadd_wf: 1,
            vfwsub_wf: 1,
            vfwmul_vf: 1,
            vfwdotp_vf: 1,
            vfwmacc_vf: 1,
            vfwnmacc_vf: 1,
            vfwmsac_vf: 1,
            vfwnmsac_vf: 1,
            vadd_vx: 1,
            vsub_vx: 1,
            vrsub_vx: 1,
            vminu_vx: 1,
            vmin_vx: 1,
            vmaxu_vx: 1,
            vmax_vx: 1,
            vand_vx: 1,
            vor_vx: 1,
            vxor_vx: 1,
            vrgather_vx: 1,
            vslideup_vx: 1,
            vslidedown_vx: 1,
            vmseq_vx: 1,
            vmsne_vx: 1,
            vmsltu_vx: 1,
            vmslt_vx: 1,
            vmsleu_vx: 1,
            vmsle_vx: 1,
            vmsgtu_vx: 1,
            vmsgt_vx: 1,
            vsaddu_vx: 1,
            vsadd_vx: 1,
            vssubu_vx: 1,
            vssub_vx: 1,
            vsll_vx: 1,
            vsmul_vx: 1,
            vsrl_vx: 1,
            vsra_vx: 1,
            vssrl_vx: 1,
            vssra_vx: 1,
            vnsrl_wx: 1,
            vnsra_wx: 1,
            vnclipu_wx: 1,
            vnclip_wx: 1,
            vaaddu_vx: 1,
            vaadd_vx: 1,
            vasubu_vx: 1,
            vasub_vx: 1,
            vslide1up_vx: 1,
            vslide1down_vx: 1,
            vdivu_vx: 1,
            vdiv_vx: 1,
            vremu_vx: 1,
            vrem_vx: 1,
            vmulhu_vx: 1,
            vmul_vx: 1,
            vmulhsu_vx: 1,
            vmulh_vx: 1,
            vmadd_vx: 1,
            vnmsub_vx: 1,
            vmacc_vx: 1,
            vnmsac_vx: 1,
            vwaddu_vx: 1,
            vwadd_vx: 1,
            vwsubu_vx: 1,
            vwsub_vx: 1,
            vwaddu_wx: 1,
            vwadd_wx: 1,
            vwsubu_wx: 1,
            vwsub_wx: 1,
            vwmulu_vx: 1,
            vwmulsu_vx: 1,
            vwmul_vx: 1,
            vwmaccu_vx: 1,
            vwmacc_vx: 1,
            vwmaccus_vx: 1,
            vwmaccsu_vx: 1,
            vamoswapei8_v: 1,
            vamoaddei8_v: 1,
            vamoxorei8_v: 1,
            vamoandei8_v: 1,
            vamoorei8_v: 1,
            vamominei8_v: 1,
            vamomaxei8_v: 1,
            vamominuei8_v: 1,
            vamomaxuei8_v: 1,
            vamoswapei16_v: 1,
            vamoaddei16_v: 1,
            vamoxorei16_v: 1,
            vamoandei16_v: 1,
            vamoorei16_v: 1,
            vamominei16_v: 1,
            vamomaxei16_v: 1,
            vamominuei16_v: 1,
            vamomaxuei16_v: 1,
            vamoswapei32_v: 1,
            vamoaddei32_v: 1,
            vamoxorei32_v: 1,
            vamoandei32_v: 1,
            vamoorei32_v: 1,
            vamominei32_v: 1,
            vamomaxei32_v: 1,
            vamominuei32_v: 1,
            vamomaxuei32_v: 1,
            vamoswapei64_v: 1,
            vamoaddei64_v: 1,
            vamoxorei64_v: 1,
            vamoandei64_v: 1,
            vamoorei64_v: 1,
            vamominei64_v: 1,
            vamomaxei64_v: 1,
            vamominuei64_v: 1,
            vamomaxuei64_v: 1,
            vfmerge_vfm: 1,
            vadc_vxm: 1,
            vmadc_vxm: 1,
            vmadc_vx: 1,
            vsbc_vxm: 1,
            vmsbc_vxm: 1,
            vmsbc_vx: 1,
            vmerge_vxm: 1,
            vsm_v: 1,
            vs1r_v: 1,
            vs2r_v: 1,
            vs4r_v: 1,
            vs8r_v: 1,
            vmv_v_i: 1,
            vadd_vi: 1,
            vrsub_vi: 1,
            vand_vi: 1,
            vor_vi: 1,
            vxor_vi: 1,
            vrgather_vi: 1,
            vslideup_vi: 1,
            vslidedown_vi: 1,
            vmseq_vi: 1,
            vmsne_vi: 1,
            vmsleu_vi: 1,
            vmsle_vi: 1,
            vmsgtu_vi: 1,
            vmsgt_vi: 1,
            vsaddu_vi: 1,
            vsadd_vi: 1,
            vsll_vi: 1,
            vsrl_vi: 1,
            vsra_vi: 1,
            vssrl_vi: 1,
            vssra_vi: 1,
            vnsrl_wi: 1,
            vnsra_wi: 1,
            vnclipu_wi: 1,
            vnclip_wi: 1,
            vadc_vim: 1,
            vmadc_vim: 1,
            vmadc_vi: 1,
            vmerge_vim: 1,
            vid_v: 1,
            vfadd_vv: 1,
            vfredusum_vs: 1,
            vfsub_vv: 1,
            vfredosum_vs: 1,
            vfmin_vv: 1,
            vfredmin_vs: 1,
            vfmax_vv: 1,
            vfredmax_vs: 1,
            vfsgnj_vv: 1,
            vfsgnjn_vv: 1,
            vfsgnjx_vv: 1,
            vmfeq_vv: 1,
            vmfle_vv: 1,
            vmflt_vv: 1,
            vmfne_vv: 1,
            vfdiv_vv: 1,
            vfmul_vv: 1,
            vfmadd_vv: 1,
            vfnmadd_vv: 1,
            vfmsub_vv: 1,
            vfnmsub_vv: 1,
            vfmacc_vv: 1,
            vfnmacc_vv: 1,
            vfmsac_vv: 1,
            vfnmsac_vv: 1,
            vfwadd_vv: 1,
            vfwredusum_vs: 1,
            vfwsub_vv: 1,
            vfwredosum_vs: 1,
            vfwadd_wv: 1,
            vfwsub_wv: 1,
            vfwmul_vv: 1,
            vfwdotp_vv: 1,
            vfwmacc_vv: 1,
            vfwnmacc_vv: 1,
            vfwmsac_vv: 1,
            vfwnmsac_vv: 1,
            vadd_vv: 1,
            vsub_vv: 1,
            vminu_vv: 1,
            vmin_vv: 1,
            vmaxu_vv: 1,
            vmax_vv: 1,
            vand_vv: 1,
            vor_vv: 1,
            vxor_vv: 1,
            vrgather_vv: 1,
            vrgatherei16_vv: 1,
            vmseq_vv: 1,
            vmsne_vv: 1,
            vmsltu_vv: 1,
            vmslt_vv: 1,
            vmsleu_vv: 1,
            vmsle_vv: 1,
            vsaddu_vv: 1,
            vsadd_vv: 1,
            vssubu_vv: 1,
            vssub_vv: 1,
            vsll_vv: 1,
            vsmul_vv: 1,
            vsrl_vv: 1,
            vsra_vv: 1,
            vssrl_vv: 1,
            vssra_vv: 1,
            vnsrl_wv: 1,
            vnsra_wv: 1,
            vnclipu_wv: 1,
            vnclip_wv: 1,
            vwredsumu_vs: 1,
            vwredsum_vs: 1,
            vredsum_vs: 1,
            vredand_vs: 1,
            vredor_vs: 1,
            vredxor_vs: 1,
            vredminu_vs: 1,
            vredmin_vs: 1,
            vredmaxu_vs: 1,
            vredmax_vs: 1,
            vaaddu_vv: 1,
            vaadd_vv: 1,
            vasubu_vv: 1,
            vasub_vv: 1,
            vmandn_mm: 1,
            vmand_mm: 1,
            vmor_mm: 1,
            vmxor_mm: 1,
            vmorn_mm: 1,
            vmnand_mm: 1,
            vmnor_mm: 1,
            vmxnor_mm: 1,
            vdivu_vv: 1,
            vdiv_vv: 1,
            vremu_vv: 1,
            vrem_vv: 1,
            vmulhu_vv: 1,
            vmul_vv: 1,
            vmulhsu_vv: 1,
            vmulh_vv: 1,
            vmadd_vv: 1,
            vnmsub_vv: 1,
            vmacc_vv: 1,
            vnmsac_vv: 1,
            vwaddu_vv: 1,
            vwadd_vv: 1,
            vwsubu_vv: 1,
            vwsub_vv: 1,
            vwaddu_wv: 1,
            vwadd_wv: 1,
            vwsubu_wv: 1,
            vwsub_wv: 1,
            vwmulu_vv: 1,
            vwmulsu_vv: 1,
            vwmul_vv: 1,
            vwmaccu_vv: 1,
            vwmacc_vv: 1,
            vwmaccsu_vv: 1,
            vfcvt_xu_f_v: 1,
            vfcvt_x_f_v: 1,
            vfcvt_f_xu_v: 1,
            vfcvt_f_x_v: 1,
            vfcvt_rtz_xu_f_v: 1,
            vfcvt_rtz_x_f_v: 1,
            vfwcvt_xu_f_v: 1,
            vfwcvt_x_f_v: 1,
            vfwcvt_f_xu_v: 1,
            vfwcvt_f_x_v: 1,
            vfwcvt_f_f_v: 1,
            vfwcvt_rtz_xu_f_v: 1,
            vfwcvt_rtz_x_f_v: 1,
            vfncvt_xu_f_w: 1,
            vfncvt_x_f_w: 1,
            vfncvt_f_xu_w: 1,
            vfncvt_f_x_w: 1,
            vfncvt_f_f_w: 1,
            vfncvt_rod_f_f_w: 1,
            vfncvt_rtz_xu_f_w: 1,
            vfncvt_rtz_x_f_w: 1,
            vfsqrt_v: 1,
            vfrsqrt7_v: 1,
            vfrec7_v: 1,
            vfclass_v: 1,
            vzext_vf8: 1,
            vsext_vf8: 1,
            vzext_vf4: 1,
            vsext_vf4: 1,
            vzext_vf2: 1,
            vsext_vf2: 1,
            vmsbf_m: 1,
            vmsof_m: 1,
            vmsif_m: 1,
            viota_m: 1,
            vmv_v_v: 1,
            vadc_vvm: 1,
            vmadc_vvm: 1,
            vmadc_vv: 1,
            vsbc_vvm: 1,
            vmsbc_vvm: 1,
            vmsbc_vv: 1,
            vmerge_vvm: 1,
            vcompress_vm: 1,
            vmv1r_v: 1,
            vmv2r_v: 1,
            vmv4r_v: 1,
            vmv8r_v: 1,
        }
    }
}
/// CSR
#[derive(Debug, Copy, Clone)]
#[repr(C)]
pub enum Csr {
    Fflags = 0x001,
    Frm = 0x002,
    Fcsr = 0x003,
    Ustatus = 0x000,
    Uie = 0x004,
    Utvec = 0x005,
    Vstart = 0x008,
    Vxsat = 0x009,
    Vxrm = 0x00a,
    Vcsr = 0x00f,
    Uscratch = 0x040,
    Uepc = 0x041,
    Ucause = 0x042,
    Utval = 0x043,
    Uip = 0x044,
    Fmode = 0x800,
    Cycle = 0xc00,
    Time = 0xc01,
    Instret = 0xc02,
    Hpmcounter3 = 0xc03,
    Hpmcounter4 = 0xc04,
    Hpmcounter5 = 0xc05,
    Hpmcounter6 = 0xc06,
    Hpmcounter7 = 0xc07,
    Hpmcounter8 = 0xc08,
    Hpmcounter9 = 0xc09,
    Hpmcounter10 = 0xc0a,
    Hpmcounter11 = 0xc0b,
    Hpmcounter12 = 0xc0c,
    Hpmcounter13 = 0xc0d,
    Hpmcounter14 = 0xc0e,
    Hpmcounter15 = 0xc0f,
    Hpmcounter16 = 0xc10,
    Hpmcounter17 = 0xc11,
    Hpmcounter18 = 0xc12,
    Hpmcounter19 = 0xc13,
    Hpmcounter20 = 0xc14,
    Hpmcounter21 = 0xc15,
    Hpmcounter22 = 0xc16,
    Hpmcounter23 = 0xc17,
    Hpmcounter24 = 0xc18,
    Hpmcounter25 = 0xc19,
    Hpmcounter26 = 0xc1a,
    Hpmcounter27 = 0xc1b,
    Hpmcounter28 = 0xc1c,
    Hpmcounter29 = 0xc1d,
    Hpmcounter30 = 0xc1e,
    Hpmcounter31 = 0xc1f,
    Vl = 0xc20,
    Vtype = 0xc21,
    Vlenb = 0xc22,
    Sstatus = 0x100,
    Sedeleg = 0x102,
    Sideleg = 0x103,
    Sie = 0x104,
    Stvec = 0x105,
    Scounteren = 0x106,
    Sscratch = 0x140,
    Sepc = 0x141,
    Scause = 0x142,
    Stval = 0x143,
    Sip = 0x144,
    Satp = 0x180,
    Vsstatus = 0x200,
    Vsie = 0x204,
    Vstvec = 0x205,
    Vsscratch = 0x240,
    Vsepc = 0x241,
    Vscause = 0x242,
    Vstval = 0x243,
    Vsip = 0x244,
    Vsatp = 0x280,
    Hstatus = 0x600,
    Hedeleg = 0x602,
    Hideleg = 0x603,
    Hie = 0x604,
    Htimedelta = 0x605,
    Hcounteren = 0x606,
    Hgeie = 0x607,
    Htval = 0x643,
    Hip = 0x644,
    Hvip = 0x645,
    Htinst = 0x64a,
    Hgatp = 0x680,
    Hgeip = 0xe12,
    Utvt = 0x007,
    Unxti = 0x045,
    Uintstatus = 0x046,
    Uscratchcsw = 0x048,
    Uscratchcswl = 0x049,
    Stvt = 0x107,
    Snxti = 0x145,
    Sintstatus = 0x146,
    Sscratchcsw = 0x148,
    Sscratchcswl = 0x149,
    Mtvt = 0x307,
    Mnxti = 0x345,
    Mintstatus = 0x346,
    Mscratchcsw = 0x348,
    Mscratchcswl = 0x349,
    Mstatus = 0x300,
    Misa = 0x301,
    Medeleg = 0x302,
    Mideleg = 0x303,
    Mie = 0x304,
    Mtvec = 0x305,
    Mcounteren = 0x306,
    Mcountinhibit = 0x320,
    Mscratch = 0x340,
    Mepc = 0x341,
    Mcause = 0x342,
    Mtval = 0x343,
    Mip = 0x344,
    Mtinst = 0x34a,
    Mtval2 = 0x34b,
    Pmpcfg0 = 0x3a0,
    Pmpcfg1 = 0x3a1,
    Pmpcfg2 = 0x3a2,
    Pmpcfg3 = 0x3a3,
    Pmpaddr0 = 0x3b0,
    Pmpaddr1 = 0x3b1,
    Pmpaddr2 = 0x3b2,
    Pmpaddr3 = 0x3b3,
    Pmpaddr4 = 0x3b4,
    Pmpaddr5 = 0x3b5,
    Pmpaddr6 = 0x3b6,
    Pmpaddr7 = 0x3b7,
    Pmpaddr8 = 0x3b8,
    Pmpaddr9 = 0x3b9,
    Pmpaddr10 = 0x3ba,
    Pmpaddr11 = 0x3bb,
    Pmpaddr12 = 0x3bc,
    Pmpaddr13 = 0x3bd,
    Pmpaddr14 = 0x3be,
    Pmpaddr15 = 0x3bf,
    Tselect = 0x7a0,
    Tdata1 = 0x7a1,
    Tdata2 = 0x7a2,
    Tdata3 = 0x7a3,
    Dcsr = 0x7b0,
    Dpc = 0x7b1,
    Dscratch0 = 0x7b2,
    Dscratch1 = 0x7b3,
    Mcycle = 0xb00,
    Minstret = 0xb02,
    Mhpmcounter3 = 0xb03,
    Mhpmcounter4 = 0xb04,
    Mhpmcounter5 = 0xb05,
    Mhpmcounter6 = 0xb06,
    Mhpmcounter7 = 0xb07,
    Mhpmcounter8 = 0xb08,
    Mhpmcounter9 = 0xb09,
    Mhpmcounter10 = 0xb0a,
    Mhpmcounter11 = 0xb0b,
    Mhpmcounter12 = 0xb0c,
    Mhpmcounter13 = 0xb0d,
    Mhpmcounter14 = 0xb0e,
    Mhpmcounter15 = 0xb0f,
    Mhpmcounter16 = 0xb10,
    Mhpmcounter17 = 0xb11,
    Mhpmcounter18 = 0xb12,
    Mhpmcounter19 = 0xb13,
    Mhpmcounter20 = 0xb14,
    Mhpmcounter21 = 0xb15,
    Mhpmcounter22 = 0xb16,
    Mhpmcounter23 = 0xb17,
    Mhpmcounter24 = 0xb18,
    Mhpmcounter25 = 0xb19,
    Mhpmcounter26 = 0xb1a,
    Mhpmcounter27 = 0xb1b,
    Mhpmcounter28 = 0xb1c,
    Mhpmcounter29 = 0xb1d,
    Mhpmcounter30 = 0xb1e,
    Mhpmcounter31 = 0xb1f,
    Mhpmevent3 = 0x323,
    Mhpmevent4 = 0x324,
    Mhpmevent5 = 0x325,
    Mhpmevent6 = 0x326,
    Mhpmevent7 = 0x327,
    Mhpmevent8 = 0x328,
    Mhpmevent9 = 0x329,
    Mhpmevent10 = 0x32a,
    Mhpmevent11 = 0x32b,
    Mhpmevent12 = 0x32c,
    Mhpmevent13 = 0x32d,
    Mhpmevent14 = 0x32e,
    Mhpmevent15 = 0x32f,
    Mhpmevent16 = 0x330,
    Mhpmevent17 = 0x331,
    Mhpmevent18 = 0x332,
    Mhpmevent19 = 0x333,
    Mhpmevent20 = 0x334,
    Mhpmevent21 = 0x335,
    Mhpmevent22 = 0x336,
    Mhpmevent23 = 0x337,
    Mhpmevent24 = 0x338,
    Mhpmevent25 = 0x339,
    Mhpmevent26 = 0x33a,
    Mhpmevent27 = 0x33b,
    Mhpmevent28 = 0x33c,
    Mhpmevent29 = 0x33d,
    Mhpmevent30 = 0x33e,
    Mhpmevent31 = 0x33f,
    Trace = 0x7d0,
    Mvendorid = 0xf11,
    Marchid = 0xf12,
    Mimpid = 0xf13,
    Mhartid = 0xf14,
    Ssr = 0x7c0,
    Fpmode = 0x7c1,
    Htimedeltah = 0x615,
    Cycleh = 0xc80,
    Timeh = 0xc81,
    Instreth = 0xc82,
    Hpmcounter3h = 0xc83,
    Hpmcounter4h = 0xc84,
    Hpmcounter5h = 0xc85,
    Hpmcounter6h = 0xc86,
    Hpmcounter7h = 0xc87,
    Hpmcounter8h = 0xc88,
    Hpmcounter9h = 0xc89,
    Hpmcounter10h = 0xc8a,
    Hpmcounter11h = 0xc8b,
    Hpmcounter12h = 0xc8c,
    Hpmcounter13h = 0xc8d,
    Hpmcounter14h = 0xc8e,
    Hpmcounter15h = 0xc8f,
    Hpmcounter16h = 0xc90,
    Hpmcounter17h = 0xc91,
    Hpmcounter18h = 0xc92,
    Hpmcounter19h = 0xc93,
    Hpmcounter20h = 0xc94,
    Hpmcounter21h = 0xc95,
    Hpmcounter22h = 0xc96,
    Hpmcounter23h = 0xc97,
    Hpmcounter24h = 0xc98,
    Hpmcounter25h = 0xc99,
    Hpmcounter26h = 0xc9a,
    Hpmcounter27h = 0xc9b,
    Hpmcounter28h = 0xc9c,
    Hpmcounter29h = 0xc9d,
    Hpmcounter30h = 0xc9e,
    Hpmcounter31h = 0xc9f,
    Mstatush = 0x310,
    Mcycleh = 0xb80,
    Minstreth = 0xb82,
    Mhpmcounter3h = 0xb83,
    Mhpmcounter4h = 0xb84,
    Mhpmcounter5h = 0xb85,
    Mhpmcounter6h = 0xb86,
    Mhpmcounter7h = 0xb87,
    Mhpmcounter8h = 0xb88,
    Mhpmcounter9h = 0xb89,
    Mhpmcounter10h = 0xb8a,
    Mhpmcounter11h = 0xb8b,
    Mhpmcounter12h = 0xb8c,
    Mhpmcounter13h = 0xb8d,
    Mhpmcounter14h = 0xb8e,
    Mhpmcounter15h = 0xb8f,
    Mhpmcounter16h = 0xb90,
    Mhpmcounter17h = 0xb91,
    Mhpmcounter18h = 0xb92,
    Mhpmcounter19h = 0xb93,
    Mhpmcounter20h = 0xb94,
    Mhpmcounter21h = 0xb95,
    Mhpmcounter22h = 0xb96,
    Mhpmcounter23h = 0xb97,
    Mhpmcounter24h = 0xb98,
    Mhpmcounter25h = 0xb99,
    Mhpmcounter26h = 0xb9a,
    Mhpmcounter27h = 0xb9b,
    Mhpmcounter28h = 0xb9c,
    Mhpmcounter29h = 0xb9d,
    Mhpmcounter30h = 0xb9e,
    Mhpmcounter31h = 0xb9f,
}
